probs
diff(probs)
probsTemp = probs*relevantY
probsTemp/max(probsTemp)
which(rangeY==lims[1])
lims = c(-5,25)
which(rangeY==lims[1])
rangeY
rangeY = seq(-99,99)
which(rangeY==lims[1])
?cdf
relY = probs[lower:upper]
lower = which(rangeY==lims[1])
upper = which(rangeY==lims[2])
relY = probs[lower:upper]
c(rep(0, lower-1), relProbs/max(relProbs), rep(1, 199-upper))
relProbs = probs[lower:upper]
c(rep(0, lower-1), relProbs/max(relProbs), rep(1, 199-upper))
test = c(rep(0, lower-1), relProbs/max(relProbs), rep(1, 199-upper))
length(test)
rescaleProbs = function(probs, lims = c(-5,25)) {
rangeY = seq(-99,99)
lower = which(rangeY==lims[1])
upper = which(rangeY==lims[2])
relProbs = probs[lower:upper]
c(rep(0, lower-1), relProbs/max(relProbs), rep(1, 199-upper))
}
length(probs)
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom2 = map(probsNorm_hom, rescaleProbs),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=summary(lmOut)$sigma, vB=vBeta),
errInd = map2_dbl(probsInd, response, crps, rangeY=rangeY),
errNorm_hom = map2_dbl(probsNorm_hom, response, crps, rangeY=rangeY),
errNorm_hom2 = map2_dbl(probsNorm_hom2, response, crps, rangeY=rangeY),
errNorm_het = map2_dbl(probsNorm_het, response, crps, rangeY=rangeY))
distPreds %>%
select(probsNorm_hom, probsNorm_hom2) %>%
slice(2) %>%
unnest() %>%
summarise_all(sum)
distPreds %>%
summarise_at(vars(starts_with("err")), mean)
theResponse2 = log(pmax(theResponse + 15, 0))
theData2 = model.matrix(~.,data=theData)
vBeta = solve(crossprod(theData2))
qqnorm(theResponse2)
tibble(response = theResponse2) %>%
ggplot() +
geom_density(aes(response))
lmOut = lm(theResponse2~., data=theData)
rangeY = log(pmax(seq(-99,99) + 15, 0))
pred = lmOut$fitted.values
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom2 = map(probsNorm_hom, rescaleProbs),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=summary(lmOut)$sigma, vB=vBeta),
errInd = map2_dbl(probsInd, response, crps, rangeY=rangeY),
errNorm_hom = map2_dbl(probsNorm_hom, response, crps, rangeY=rangeY),
errNorm_hom2 = map2_dbl(probsNorm_hom2, response, crps, rangeY=rangeY),
errNorm_het = map2_dbl(probsNorm_het, response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("err")), mean)
summary(lm)
summary(lmOut)
loadData("features_py.csv")
toRemove = c(1:12, 14, 15, 16, 21, 22:28, 33)
theData = loadData("features_py.csv") %>%
select(-toRemove) %>%
mutate_at(vars(categorical), as.factor)
categorical = c("Down", "OffenseFormation", "Turf", "GameWeather", "Rusher_Pos")
toRemove = c(1:12, 14, 15, 16, 21, 22:28, 33)
theData = loadData("features_py.csv") %>%
select(-toRemove) %>%
mutate_at(vars(categorical), as.factor)
theResponse = loadData("response_py.csv") %>%
pull(Yards)
dim(theData); length(theResponse)
dim(model.matrix(~.,data=theData))
52^2
83^2
theResponse2 = log(pmax(theResponse + 15, 0))
theData2 = model.matrix(~.,data=theData)
vBeta = solve(crossprod(theData2))
qqnorm(theResponse2)
tibble(response = theResponse2) %>%
ggplot() +
geom_density(aes(response))
lmOut = lm(theResponse2~., data=theData)
rangeY = log(pmax(seq(-99,99) + 15, 0))
pred = lmOut$fitted.values
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom2 = map(probsNorm_hom, rescaleProbs),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=summary(lmOut)$sigma, vB=vBeta),
errInd = map2_dbl(probsInd, response, crps, rangeY=rangeY),
errNorm_hom = map2_dbl(probsNorm_hom, response, crps, rangeY=rangeY),
errNorm_hom2 = map2_dbl(probsNorm_hom2, response, crps, rangeY=rangeY),
errNorm_het = map2_dbl(probsNorm_het, response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("err")), mean)
probs = getProbsInd(pred, rangeY)
for (i in 1:5) {
x = as.matrix(theData2[i,], ncol=1)
print(sqrt(t(x)%*%vBeta%*%x))
sd = summary(lmOut)$sigma
probs = getProbs.norm(pred[i], sd)
print(plotProbEst(probs, theResponse2[i], rangeY))
}
plotProbEst = function(probs, y, rangeY) {
Hy = as.integer(rangeY >= y)
tibble(probs, Hy, yards = seq(-99,99)) %>%
gather(fnc, value, probs, Hy) %>%
ggplot() +
geom_line(aes(yards, value, color=fnc))
}
for (i in 1:5) {
x = as.matrix(theData2[i,], ncol=1)
print(sqrt(t(x)%*%vBeta%*%x))
sd = summary(lmOut)$sigma
probs = getProbs.norm(pred[i], sd)
print(plotProbEst(probs, theResponse2[i], rangeY))
}
summary(lmOut)$sigma
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_hom2 = map(probsNorm_hom, rescaleProbs),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=summary(lmOut)$sigma, vB=vBeta),
errInd = map2_dbl(probsInd, response, crps, rangeY=rangeY),
errNorm_hom = map2_dbl(probsNorm_hom, response, crps, rangeY=rangeY),
errNorm_hom2 = map2_dbl(probsNorm_hom2, response, crps, rangeY=rangeY),
errNorm_het = map2_dbl(probsNorm_het, response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("err")), mean)
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.15),
probsNorm_hom2 = map(probsNorm_hom, rescaleProbs),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=summary(lmOut)$sigma, vB=vBeta),
errInd = map2_dbl(probsInd, response, crps, rangeY=rangeY),
errNorm_hom = map2_dbl(probsNorm_hom, response, crps, rangeY=rangeY),
errNorm_hom2 = map2_dbl(probsNorm_hom2, response, crps, rangeY=rangeY),
errNorm_het = map2_dbl(probsNorm_het, response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("err")), mean)
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.18),
probsNorm_hom2 = map(probsNorm_hom, rescaleProbs),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=summary(lmOut)$sigma, vB=vBeta),
errInd = map2_dbl(probsInd, response, crps, rangeY=rangeY),
errNorm_hom = map2_dbl(probsNorm_hom, response, crps, rangeY=rangeY),
errNorm_hom2 = map2_dbl(probsNorm_hom2, response, crps, rangeY=rangeY),
errNorm_het = map2_dbl(probsNorm_het, response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("err")), mean)
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_hom2 = map(probsNorm_hom, rescaleProbs),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=summary(lmOut)$sigma, vB=vBeta),
errInd = map2_dbl(probsInd, response, crps, rangeY=rangeY),
errNorm_hom = map2_dbl(probsNorm_hom, response, crps, rangeY=rangeY),
errNorm_hom2 = map2_dbl(probsNorm_hom2, response, crps, rangeY=rangeY),
errNorm_het = map2_dbl(probsNorm_het, response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("err")), mean)
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_hom2 = map(probsNorm_hom, rescaleProbs),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta),
errInd = map2_dbl(probsInd, response, crps, rangeY=rangeY),
errNorm_hom = map2_dbl(probsNorm_hom, response, crps, rangeY=rangeY),
errNorm_hom2 = map2_dbl(probsNorm_hom2, response, crps, rangeY=rangeY),
errNorm_het = map2_dbl(probsNorm_het, response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("err")), mean)
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.15),
probsNorm_hom2 = map(probsNorm_hom, rescaleProbs),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta),
errInd = map2_dbl(probsInd, response, crps, rangeY=rangeY),
errNorm_hom = map2_dbl(probsNorm_hom, response, crps, rangeY=rangeY),
errNorm_hom2 = map2_dbl(probsNorm_hom2, response, crps, rangeY=rangeY),
errNorm_het = map2_dbl(probsNorm_het, response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("err")), mean)
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.18),
probsNorm_hom2 = map(probsNorm_hom, rescaleProbs),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta),
errInd = map2_dbl(probsInd, response, crps, rangeY=rangeY),
errNorm_hom = map2_dbl(probsNorm_hom, response, crps, rangeY=rangeY),
errNorm_hom2 = map2_dbl(probsNorm_hom2, response, crps, rangeY=rangeY),
errNorm_het = map2_dbl(probsNorm_het, response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("err")), mean)
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_hom2 = map(probsNorm_hom, rescaleProbs),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta),
errInd = map2_dbl(probsInd, response, crps, rangeY=rangeY),
errNorm_hom = map2_dbl(probsNorm_hom, response, crps, rangeY=rangeY),
errNorm_hom2 = map2_dbl(probsNorm_hom2, response, crps, rangeY=rangeY),
errNorm_het = map2_dbl(probsNorm_het, response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("err")), mean)
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta)) %>%
mutate_at(vars(starts_with("probs")), ~rescaleProbs(.))
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta)) %>%
mutate_at(vars(starts_with("probs")), ~map(rescaleProbs(.)))
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta)) %>%
mutate_at(vars(starts_with("probs")), ~map(., rescaleProbs))
distPreds
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta)) %>%
mutate_at(vars(starts_with("probs")), ~map(., rescaleProbs)) %>%
mutate_at(vars(starts_with("probs")), ~map2_dbl(., response, crps, rangeY=rangeY))
distPreds
distPreds %>%
summarise_at(vars(starts_with("err")), mean)
distPreds %>%
summarise_at(vars(starts_with("probs")), mean)
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_hom2 = map(probsNorm_hom, rescaleProbs),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta),
probsNorm_het2 = map2(probsNorm_het, rescaleProbs),
errInd = map2_dbl(probsInd, response, crps, rangeY=rangeY),
errNorm_hom = map2_dbl(probsNorm_hom, response, crps, rangeY=rangeY),
errNorm_hom2 = map2_dbl(probsNorm_hom2, response, crps, rangeY=rangeY),
errNorm_het = map2_dbl(probsNorm_het, response, crps, rangeY=rangeY))
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_hom2 = map(probsNorm_hom, rescaleProbs),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta),
probsNorm_het2 = map2(probsNorm_het, rescaleProbs),
errInd = map2_dbl(probsInd, response, crps, rangeY=rangeY),
errNorm_hom = map2_dbl(probsNorm_hom, response, crps, rangeY=rangeY),
errNorm_hom2 = map2_dbl(probsNorm_hom2, response, crps, rangeY=rangeY),
errNorm_het = map2_dbl(probsNorm_het, response, crps, rangeY=rangeY))
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_hom2 = map(probsNorm_hom, rescaleProbs),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta),
errInd = map2_dbl(probsInd, response, crps, rangeY=rangeY),
errNorm_hom = map2_dbl(probsNorm_hom, response, crps, rangeY=rangeY),
errNorm_hom2 = map2_dbl(probsNorm_hom2, response, crps, rangeY=rangeY),
errNorm_het = map2_dbl(probsNorm_het, response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("err")), mean)
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_hom2 = map(probsNorm_hom, rescaleProbs),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta),
errInd = map2_dbl(probsInd, response, crps, rangeY=rangeY),
errNorm_hom = map2_dbl(probsNorm_hom, response, crps, rangeY=rangeY),
errNorm_hom2 = map2_dbl(probsNorm_hom2, response, crps, rangeY=rangeY),
errNorm_het = map2_dbl(probsNorm_het, response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("err")), mean)
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta)) %>%
mutate_at(vars(starts_with("probs")), ~map(., rescaleProbs)) %>%
mutate_at(vars(starts_with("probs")), ~map2_dbl(., response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("probs")), mean)
range(preds)
range(pred)
range(lmOut$fitted.values)
exp(range(lmOut$fitted.values))-15
rescaleProbs = function(probs, lims = c(-5,25)) {
rangeY = seq(-99,99)
lower = which(rangeY==lims[1])
upper = which(rangeY==lims[2])
relProbs = probs[lower:upper]
if (max(relProbs)==0) {
probs
} else {
c(rep(0, lower-1), relProbs/max(relProbs), rep(1, 199-upper))
}
}
rescaleProbs = function(probs, lims = c(-5,25)) {
rangeY = seq(-99,99)
lower = which(rangeY==lims[1])
upper = which(rangeY==lims[2])
relProbs = probs[lower:upper]
if (max(relProbs)==0) {
probs
} else {
c(rep(0, lower-1), relProbs/max(relProbs), rep(1, 199-upper))
}
}
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta)) %>%
mutate_at(vars(starts_with("probs")), ~map(., rescaleProbs)) %>%
mutate_at(vars(starts_with("probs")), ~map2_dbl(., response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("probs")), mean)
lmOut = lm(theResponse2~.^2, data=theData)
rangeY = log(pmax(seq(-99,99) + 15, 0))
pred = lmOut$fitted.values
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta)) %>%
mutate_at(vars(starts_with("probs")), ~map(., rescaleProbs)) %>%
mutate_at(vars(starts_with("probs")), ~map2_dbl(., response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("probs")), mean)
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta)) %>%
# mutate_at(vars(starts_with("probs")), ~map(., rescaleProbs)) %>%
mutate_at(vars(starts_with("probs")), ~map2_dbl(., response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("probs")), mean)
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta)) %>%
# mutate_at(vars(starts_with("probs")), ~map(., rescaleProbs)) %>%
mutate_at(vars(starts_with("probs")), ~map2_dbl(., response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("probs")), mean)
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta)) %>%
# mutate_at(vars(starts_with("probs")), ~map(., rescaleProbs)) %>%
mutate_at(vars(starts_with("probs")), ~map2_dbl(., response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("probs")), mean)
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom2 = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta)) %>%
# mutate_at(vars(starts_with("probs")), ~map(., rescaleProbs)) %>%
mutate_at(vars(starts_with("probs")), ~map2_dbl(., response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("probs")), mean)
summary(lmOut)$sigma
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom2 = map(pred, getProbs.norm, rangeY=rangeY, sd=.16),
probsNorm_hom3 = map(pred, getProbs.norm, rangeY=rangeY, sd=.17),
probsNorm_hom4 = map(pred, getProbs.norm, rangeY=rangeY, sd=.18),
probsNorm_hom5 = map(pred, getProbs.norm, rangeY=rangeY, sd=.19),
probsNorm_hom6 = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_hom7 = map(pred, getProbs.norm, rangeY=rangeY, sd=.21),
probsNorm_hom8 = map(pred, getProbs.norm, rangeY=rangeY, sd=.22),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta)) %>%
# mutate_at(vars(starts_with("probs")), ~map(., rescaleProbs)) %>%
mutate_at(vars(starts_with("probs")), ~map2_dbl(., response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("probs")), mean)
library(knitr)
opts_chunk$set(echo = TRUE,
collapse = FALSE,
comment = "",
strip.white = TRUE,
warning = FALSE,
message = FALSE,
out.width = "70%",
fig.align = "center")
theData = loadData("features_py.csv")
dim(theData)
theData = loadData("features_py.csv") %>%
select(-toRemove) %>%
mutate_at(vars(categorical), as.factor)
dim(theData); length(theResponse)
theData = loadData("features_py.csv") %>%
select(-toRemove) %>%
mutate_at(vars(categorical), as.factor)
dim(model.matrix(~., data=theData))
# dim(model.matrix(~., data=theData))
dim(model.matrix(~.^2, data=theData))
theData = loadData("features_py.csv")
colnames(theData)
