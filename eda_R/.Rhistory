<<<<<<< Updated upstream
probs
diff(probs)
probsTemp = probs*relevantY
probsTemp/max(probsTemp)
which(rangeY==lims[1])
lims = c(-5,25)
which(rangeY==lims[1])
rangeY
rangeY = seq(-99,99)
which(rangeY==lims[1])
?cdf
relY = probs[lower:upper]
lower = which(rangeY==lims[1])
upper = which(rangeY==lims[2])
relY = probs[lower:upper]
c(rep(0, lower-1), relProbs/max(relProbs), rep(1, 199-upper))
relProbs = probs[lower:upper]
c(rep(0, lower-1), relProbs/max(relProbs), rep(1, 199-upper))
test = c(rep(0, lower-1), relProbs/max(relProbs), rep(1, 199-upper))
length(test)
rescaleProbs = function(probs, lims = c(-5,25)) {
rangeY = seq(-99,99)
lower = which(rangeY==lims[1])
upper = which(rangeY==lims[2])
relProbs = probs[lower:upper]
c(rep(0, lower-1), relProbs/max(relProbs), rep(1, 199-upper))
}
length(probs)
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom2 = map(probsNorm_hom, rescaleProbs),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=summary(lmOut)$sigma, vB=vBeta),
errInd = map2_dbl(probsInd, response, crps, rangeY=rangeY),
errNorm_hom = map2_dbl(probsNorm_hom, response, crps, rangeY=rangeY),
errNorm_hom2 = map2_dbl(probsNorm_hom2, response, crps, rangeY=rangeY),
errNorm_het = map2_dbl(probsNorm_het, response, crps, rangeY=rangeY))
distPreds %>%
select(probsNorm_hom, probsNorm_hom2) %>%
slice(2) %>%
unnest() %>%
summarise_all(sum)
distPreds %>%
summarise_at(vars(starts_with("err")), mean)
theResponse2 = log(pmax(theResponse + 15, 0))
theData2 = model.matrix(~.,data=theData)
vBeta = solve(crossprod(theData2))
qqnorm(theResponse2)
tibble(response = theResponse2) %>%
ggplot() +
geom_density(aes(response))
lmOut = lm(theResponse2~., data=theData)
rangeY = log(pmax(seq(-99,99) + 15, 0))
pred = lmOut$fitted.values
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom2 = map(probsNorm_hom, rescaleProbs),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=summary(lmOut)$sigma, vB=vBeta),
errInd = map2_dbl(probsInd, response, crps, rangeY=rangeY),
errNorm_hom = map2_dbl(probsNorm_hom, response, crps, rangeY=rangeY),
errNorm_hom2 = map2_dbl(probsNorm_hom2, response, crps, rangeY=rangeY),
errNorm_het = map2_dbl(probsNorm_het, response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("err")), mean)
summary(lm)
summary(lmOut)
loadData("features_py.csv")
toRemove = c(1:12, 14, 15, 16, 21, 22:28, 33)
theData = loadData("features_py.csv") %>%
select(-toRemove) %>%
mutate_at(vars(categorical), as.factor)
categorical = c("Down", "OffenseFormation", "Turf", "GameWeather", "Rusher_Pos")
toRemove = c(1:12, 14, 15, 16, 21, 22:28, 33)
theData = loadData("features_py.csv") %>%
select(-toRemove) %>%
mutate_at(vars(categorical), as.factor)
theResponse = loadData("response_py.csv") %>%
pull(Yards)
dim(theData); length(theResponse)
dim(model.matrix(~.,data=theData))
52^2
83^2
theResponse2 = log(pmax(theResponse + 15, 0))
theData2 = model.matrix(~.,data=theData)
vBeta = solve(crossprod(theData2))
qqnorm(theResponse2)
tibble(response = theResponse2) %>%
ggplot() +
geom_density(aes(response))
lmOut = lm(theResponse2~., data=theData)
rangeY = log(pmax(seq(-99,99) + 15, 0))
pred = lmOut$fitted.values
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom2 = map(probsNorm_hom, rescaleProbs),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=summary(lmOut)$sigma, vB=vBeta),
errInd = map2_dbl(probsInd, response, crps, rangeY=rangeY),
errNorm_hom = map2_dbl(probsNorm_hom, response, crps, rangeY=rangeY),
errNorm_hom2 = map2_dbl(probsNorm_hom2, response, crps, rangeY=rangeY),
errNorm_het = map2_dbl(probsNorm_het, response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("err")), mean)
probs = getProbsInd(pred, rangeY)
for (i in 1:5) {
x = as.matrix(theData2[i,], ncol=1)
print(sqrt(t(x)%*%vBeta%*%x))
sd = summary(lmOut)$sigma
probs = getProbs.norm(pred[i], sd)
print(plotProbEst(probs, theResponse2[i], rangeY))
}
plotProbEst = function(probs, y, rangeY) {
Hy = as.integer(rangeY >= y)
tibble(probs, Hy, yards = seq(-99,99)) %>%
gather(fnc, value, probs, Hy) %>%
ggplot() +
geom_line(aes(yards, value, color=fnc))
}
for (i in 1:5) {
x = as.matrix(theData2[i,], ncol=1)
print(sqrt(t(x)%*%vBeta%*%x))
sd = summary(lmOut)$sigma
probs = getProbs.norm(pred[i], sd)
print(plotProbEst(probs, theResponse2[i], rangeY))
}
summary(lmOut)$sigma
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_hom2 = map(probsNorm_hom, rescaleProbs),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=summary(lmOut)$sigma, vB=vBeta),
errInd = map2_dbl(probsInd, response, crps, rangeY=rangeY),
errNorm_hom = map2_dbl(probsNorm_hom, response, crps, rangeY=rangeY),
errNorm_hom2 = map2_dbl(probsNorm_hom2, response, crps, rangeY=rangeY),
errNorm_het = map2_dbl(probsNorm_het, response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("err")), mean)
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.15),
probsNorm_hom2 = map(probsNorm_hom, rescaleProbs),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=summary(lmOut)$sigma, vB=vBeta),
errInd = map2_dbl(probsInd, response, crps, rangeY=rangeY),
errNorm_hom = map2_dbl(probsNorm_hom, response, crps, rangeY=rangeY),
errNorm_hom2 = map2_dbl(probsNorm_hom2, response, crps, rangeY=rangeY),
errNorm_het = map2_dbl(probsNorm_het, response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("err")), mean)
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.18),
probsNorm_hom2 = map(probsNorm_hom, rescaleProbs),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=summary(lmOut)$sigma, vB=vBeta),
errInd = map2_dbl(probsInd, response, crps, rangeY=rangeY),
errNorm_hom = map2_dbl(probsNorm_hom, response, crps, rangeY=rangeY),
errNorm_hom2 = map2_dbl(probsNorm_hom2, response, crps, rangeY=rangeY),
errNorm_het = map2_dbl(probsNorm_het, response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("err")), mean)
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_hom2 = map(probsNorm_hom, rescaleProbs),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=summary(lmOut)$sigma, vB=vBeta),
errInd = map2_dbl(probsInd, response, crps, rangeY=rangeY),
errNorm_hom = map2_dbl(probsNorm_hom, response, crps, rangeY=rangeY),
errNorm_hom2 = map2_dbl(probsNorm_hom2, response, crps, rangeY=rangeY),
errNorm_het = map2_dbl(probsNorm_het, response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("err")), mean)
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_hom2 = map(probsNorm_hom, rescaleProbs),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta),
errInd = map2_dbl(probsInd, response, crps, rangeY=rangeY),
errNorm_hom = map2_dbl(probsNorm_hom, response, crps, rangeY=rangeY),
errNorm_hom2 = map2_dbl(probsNorm_hom2, response, crps, rangeY=rangeY),
errNorm_het = map2_dbl(probsNorm_het, response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("err")), mean)
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.15),
probsNorm_hom2 = map(probsNorm_hom, rescaleProbs),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta),
errInd = map2_dbl(probsInd, response, crps, rangeY=rangeY),
errNorm_hom = map2_dbl(probsNorm_hom, response, crps, rangeY=rangeY),
errNorm_hom2 = map2_dbl(probsNorm_hom2, response, crps, rangeY=rangeY),
errNorm_het = map2_dbl(probsNorm_het, response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("err")), mean)
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.18),
probsNorm_hom2 = map(probsNorm_hom, rescaleProbs),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta),
errInd = map2_dbl(probsInd, response, crps, rangeY=rangeY),
errNorm_hom = map2_dbl(probsNorm_hom, response, crps, rangeY=rangeY),
errNorm_hom2 = map2_dbl(probsNorm_hom2, response, crps, rangeY=rangeY),
errNorm_het = map2_dbl(probsNorm_het, response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("err")), mean)
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_hom2 = map(probsNorm_hom, rescaleProbs),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta),
errInd = map2_dbl(probsInd, response, crps, rangeY=rangeY),
errNorm_hom = map2_dbl(probsNorm_hom, response, crps, rangeY=rangeY),
errNorm_hom2 = map2_dbl(probsNorm_hom2, response, crps, rangeY=rangeY),
errNorm_het = map2_dbl(probsNorm_het, response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("err")), mean)
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta)) %>%
mutate_at(vars(starts_with("probs")), ~rescaleProbs(.))
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta)) %>%
mutate_at(vars(starts_with("probs")), ~map(rescaleProbs(.)))
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta)) %>%
mutate_at(vars(starts_with("probs")), ~map(., rescaleProbs))
distPreds
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta)) %>%
mutate_at(vars(starts_with("probs")), ~map(., rescaleProbs)) %>%
mutate_at(vars(starts_with("probs")), ~map2_dbl(., response, crps, rangeY=rangeY))
distPreds
distPreds %>%
summarise_at(vars(starts_with("err")), mean)
distPreds %>%
summarise_at(vars(starts_with("probs")), mean)
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_hom2 = map(probsNorm_hom, rescaleProbs),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta),
probsNorm_het2 = map2(probsNorm_het, rescaleProbs),
errInd = map2_dbl(probsInd, response, crps, rangeY=rangeY),
errNorm_hom = map2_dbl(probsNorm_hom, response, crps, rangeY=rangeY),
errNorm_hom2 = map2_dbl(probsNorm_hom2, response, crps, rangeY=rangeY),
errNorm_het = map2_dbl(probsNorm_het, response, crps, rangeY=rangeY))
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_hom2 = map(probsNorm_hom, rescaleProbs),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta),
probsNorm_het2 = map2(probsNorm_het, rescaleProbs),
errInd = map2_dbl(probsInd, response, crps, rangeY=rangeY),
errNorm_hom = map2_dbl(probsNorm_hom, response, crps, rangeY=rangeY),
errNorm_hom2 = map2_dbl(probsNorm_hom2, response, crps, rangeY=rangeY),
errNorm_het = map2_dbl(probsNorm_het, response, crps, rangeY=rangeY))
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_hom2 = map(probsNorm_hom, rescaleProbs),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta),
errInd = map2_dbl(probsInd, response, crps, rangeY=rangeY),
errNorm_hom = map2_dbl(probsNorm_hom, response, crps, rangeY=rangeY),
errNorm_hom2 = map2_dbl(probsNorm_hom2, response, crps, rangeY=rangeY),
errNorm_het = map2_dbl(probsNorm_het, response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("err")), mean)
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_hom2 = map(probsNorm_hom, rescaleProbs),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta),
errInd = map2_dbl(probsInd, response, crps, rangeY=rangeY),
errNorm_hom = map2_dbl(probsNorm_hom, response, crps, rangeY=rangeY),
errNorm_hom2 = map2_dbl(probsNorm_hom2, response, crps, rangeY=rangeY),
errNorm_het = map2_dbl(probsNorm_het, response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("err")), mean)
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta)) %>%
mutate_at(vars(starts_with("probs")), ~map(., rescaleProbs)) %>%
mutate_at(vars(starts_with("probs")), ~map2_dbl(., response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("probs")), mean)
range(preds)
range(pred)
range(lmOut$fitted.values)
exp(range(lmOut$fitted.values))-15
rescaleProbs = function(probs, lims = c(-5,25)) {
rangeY = seq(-99,99)
lower = which(rangeY==lims[1])
upper = which(rangeY==lims[2])
relProbs = probs[lower:upper]
if (max(relProbs)==0) {
probs
} else {
c(rep(0, lower-1), relProbs/max(relProbs), rep(1, 199-upper))
}
}
rescaleProbs = function(probs, lims = c(-5,25)) {
rangeY = seq(-99,99)
lower = which(rangeY==lims[1])
upper = which(rangeY==lims[2])
relProbs = probs[lower:upper]
if (max(relProbs)==0) {
probs
} else {
c(rep(0, lower-1), relProbs/max(relProbs), rep(1, 199-upper))
}
}
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta)) %>%
mutate_at(vars(starts_with("probs")), ~map(., rescaleProbs)) %>%
mutate_at(vars(starts_with("probs")), ~map2_dbl(., response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("probs")), mean)
lmOut = lm(theResponse2~.^2, data=theData)
rangeY = log(pmax(seq(-99,99) + 15, 0))
pred = lmOut$fitted.values
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta)) %>%
mutate_at(vars(starts_with("probs")), ~map(., rescaleProbs)) %>%
mutate_at(vars(starts_with("probs")), ~map2_dbl(., response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("probs")), mean)
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta)) %>%
# mutate_at(vars(starts_with("probs")), ~map(., rescaleProbs)) %>%
mutate_at(vars(starts_with("probs")), ~map2_dbl(., response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("probs")), mean)
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta)) %>%
# mutate_at(vars(starts_with("probs")), ~map(., rescaleProbs)) %>%
mutate_at(vars(starts_with("probs")), ~map2_dbl(., response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("probs")), mean)
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta)) %>%
# mutate_at(vars(starts_with("probs")), ~map(., rescaleProbs)) %>%
mutate_at(vars(starts_with("probs")), ~map2_dbl(., response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("probs")), mean)
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom2 = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta)) %>%
# mutate_at(vars(starts_with("probs")), ~map(., rescaleProbs)) %>%
mutate_at(vars(starts_with("probs")), ~map2_dbl(., response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("probs")), mean)
summary(lmOut)$sigma
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom2 = map(pred, getProbs.norm, rangeY=rangeY, sd=.16),
probsNorm_hom3 = map(pred, getProbs.norm, rangeY=rangeY, sd=.17),
probsNorm_hom4 = map(pred, getProbs.norm, rangeY=rangeY, sd=.18),
probsNorm_hom5 = map(pred, getProbs.norm, rangeY=rangeY, sd=.19),
probsNorm_hom6 = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_hom7 = map(pred, getProbs.norm, rangeY=rangeY, sd=.21),
probsNorm_hom8 = map(pred, getProbs.norm, rangeY=rangeY, sd=.22),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta)) %>%
# mutate_at(vars(starts_with("probs")), ~map(., rescaleProbs)) %>%
mutate_at(vars(starts_with("probs")), ~map2_dbl(., response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("probs")), mean)
library(knitr)
opts_chunk$set(echo = TRUE,
collapse = FALSE,
comment = "",
strip.white = TRUE,
warning = FALSE,
message = FALSE,
out.width = "70%",
fig.align = "center")
theData = loadData("features_py.csv")
dim(theData)
theData = loadData("features_py.csv") %>%
select(-toRemove) %>%
mutate_at(vars(categorical), as.factor)
dim(theData); length(theResponse)
theData = loadData("features_py.csv") %>%
select(-toRemove) %>%
mutate_at(vars(categorical), as.factor)
dim(model.matrix(~., data=theData))
# dim(model.matrix(~., data=theData))
dim(model.matrix(~.^2, data=theData))
theData = loadData("features_py.csv")
colnames(theData)
=======
(PlayDirection=="left" & PossessionTeam!=FieldPosition),
"left", "right"),
LineOfScrimmage = ifelse(LOS_Side=="left", YardLine+10, 110-YardLine))
dfLos = df %>%
group_by(PlayId) %>%
summarise(AveDist_LOS = mean(abs(X-LineOfScrimmage))) %>%
arrange(desc(AveDist_LOS))
longDist = dfLOS %>%
pull(PlayId) %>%
head()
index=1
plotPlay(filter(df, PlayId==longDist[index]), "AveDist_LOS", dfLOS[1, "AveDist_LOS"])
colnames(df)
library(knitr)
opts_chunk$set(echo = TRUE,
collapse = FALSE,
comment = "",
strip.white = TRUE,
warning = FALSE,
message = FALSE,
out.width = "70%",
fig.align = "center")
library(tidyverse)
library(magrittr)
loadData <- function(fileName = "train.csv", ...) {
file = paste("../input", fileName, sep="/")
data.table::fread(file, ...) %>%
as_tibble()
}
df = loadData("trainClean.csv")
df = df %>%
mutate(YardsToGoal = YardLine + (100-2*YardLine)*(PossessionTeam==FieldPosition))
df %>%
distinct(PlayId, .keep_all=T) %>%
ggplot(aes(x=YardsToGoal)) +
geom_histogram()
df %<>%
mutate(LOS_Side = ifelse((PlayDirection=="right" & PossessionTeam==FieldPosition) |
(PlayDirection=="left" & PossessionTeam!=FieldPosition),
"left", "right"),
LineOfScrimmage = ifelse(LOS_Side=="left", YardLine+10, 110-YardLine))
dfLos = df %>%
group_by(PlayId) %>%
summarise(AveDist_LOS = mean(abs(X-LineOfScrimmage))) %>%
arrange(desc(AveDist_LOS))
ggplot(dfLOS) +
geom_histogram(aes(aveDist_LOS))
ggplot(dfLOS) +
geom_histogram(aes(AveDist_LOS))
longDist = dfLOS %>%
pull(PlayId) %>%
head()
index=1
plotPlay(filter(df, PlayId==longDist[index]), "AveDist_LOS", dfLOS[1, "AveDist_LOS"])
filter(df, PlayId==longDist[index])
df %<>%
mutate(LOS_Side = ifelse((PlayDirection=="right" & PossessionTeam==FieldPosition) |
(PlayDirection=="left" & PossessionTeam!=FieldPosition),
"left", "right"),
LineOfScrimmage = ifelse(LOS_Side=="left", YardLine+10, 110-YardLine))
dfLOS = df %>%
group_by(PlayId) %>%
summarise(AveDist_LOS = mean(abs(X-LineOfScrimmage))) %>%
arrange(desc(AveDist_LOS))
ggplot(dfLOS) +
geom_histogram(aes(AveDist_LOS))
longDist = dfLOS %>%
pull(PlayId) %>%
head()
ggplot(dfLOS) +
geom_histogram(aes(AveDist_LOS))
longDist = dfLOS %>%
pull(PlayId) %>%
head()
index=1
plotPlay(filter(df, PlayId==longDist[index]), "AveDist_LOS", dfLOS[1, "AveDist_LOS"])
library(knitr)
opts_chunk$set(echo = TRUE,
collapse = FALSE,
comment = "",
strip.white = TRUE,
warning = FALSE,
message = FALSE,
out.width = "70%",
fig.align = "center")
df %>%
select(PossessionTeam, FieldPosition, HomeTeamAbbr, VisitorTeamAbbr) %>%
summarise.all(function(col) sum(is.na(col)))
?summarise
df %>%
select(PossessionTeam, FieldPosition, HomeTeamAbbr, VisitorTeamAbbr) %>%
summarise_all(function(col) sum(is.na(col)))
df = loadData("trainClean_py.csv")
ggplot(df) +
geom_histogram(aes(DistanceToLOS))
dfPy = loadData("trainClean_py.csv")
ggplot(dfPy) +
geom_histogram(aes(DistanceToLOS))
dfPy
longDist = dfPy %>%
pull(PlayId) %>%
head()
longDist = dfPy %>%
arrange(desc(DistanceToLos)) %>%
pull(PlayId) %>%
head()
longDist = dfPy %>%
arrange(desc(DistanceToLOS)) %>%
pull(PlayId) %>%
head()
index=1
plotPlay(filter(df, PlayId==longDist[index]), "DistanceToLOS", dfLOS[1, "DistanceToLOS"])
df = loadData("trainClean.csv")
plotPlay(filter(df, PlayId==longDist[index]), "DistanceToLOS", dfLOS[1, "DistanceToLOS"])
dfPy = loadData("trainClean_py.csv") %>%
arrange(desc(DestanceToLOS))
dfPy = loadData("trainClean_py.csv") %>%
arrange(desc(DistanceToLOS))
ggplot(dfPy) +
geom_histogram(aes(DistanceToLOS))
longDist = dfPy %>%
pull(PlayId) %>%
head()
index=1
plotPlay(filter(df, PlayId==longDist[index]), "DistanceToLOS", dfPy[1, "DistanceToLOS"])
df %<>%
mutate(LOS_Side = ifelse((PlayDirection=="right" & PossessionTeam==FieldPosition) |
(PlayDirection=="left" & PossessionTeam!=FieldPosition),
"left", "right"),
LineOfScrimmage = ifelse(LOS_Side=="left", YardLine+10, 110-YardLine))
plotPlay(filter(df, PlayId==longDist[index]), "DistanceToLOS", dfPy[1, "DistanceToLOS"])
dfPy %>%
filter(PlayId==longDist[index])
dfPy %>%
filter(PlayId==longDist[index]) %>%
select(PossessionTeam, FieldPosition, HomeTeamAbbr, VisitorTeamAbbr, DistanceToGoal, DistanceToLOS)
plotPlay(filter(df, PlayId==longDist[index]), "DistanceToLOS", dfPy[1, "DistanceToLOS"])
dfPy %>%
filter(PlayId==longDist[index]) %>%
select(PossessionTeam, FieldPosition, HomeTeamAbbr, VisitorTeamAbbr, DistanceToGoal, DistanceToLOS)
library(knitr)
opts_chunk$set(echo = TRUE,
collapse = FALSE,
comment = "",
strip.white = TRUE,
warning = FALSE,
message = FALSE,
out.width = "70%",
fig.align = "center")
library(tidyverse)
library(magrittr)
loadData <- function(fileName = "train.csv", ...) {
file = paste("../input", fileName, sep="/")
data.table::fread(file, ...) %>%
as_tibble()
}
df = loadData("trainClean.csv")
df %<>%
mutate(LOS_Side = ifelse((PlayDirection=="right" & PossessionTeam==FieldPosition) |
(PlayDirection=="left" & PossessionTeam!=FieldPosition),
"left", "right"),
LineOfScrimmage = ifelse(LOS_Side=="left", YardLine+10, 110-YardLine))
dfLOS = df %>%
group_by(PlayId) %>%
summarise(DistanceToLOS = mean(abs(X-LineOfScrimmage))) %>%
arrange(desc(DistanceToLOS))
ggplot(dfLOS) +
geom_histogram(aes(DistanceToLOS))
longDist = dfLOS %>%
pull(PlayId) %>%
head()
index=1
plotPlay(filter(df, PlayId==longDist[index]), "DistanceToLOS", dfLOS[1, "DistanceToLOS"])
library(knitr)
opts_chunk$set(echo = TRUE,
collapse = FALSE,
comment = "",
strip.white = TRUE,
warning = FALSE,
message = FALSE,
out.width = "70%",
fig.align = "center")
plotPlay = function(dfPlay, featureName, featureValue) {
ggplot(dfPlay) +
geom_point(aes(X, Y, color=Team)) +
geom_vline(aes(xintercept=LineOfScrimmage), color="yellow") +
geom_vline(aes(xintercept=10), color="grey") +
geom_vline(aes(xintercept=110), color="grey") +
coord_cartesian(xlim = c(0,120), ylim=c(0,53.3), expand=F) +
labs(title = paste("Offense", dfPlay$PossessionTeam, "; ",
"PlayDirection", dfPlay$PlayDirection, "; ",
"FieldPosition", dfPlay$FieldPosition, "; ",
"HomeTeam", dfPlay$HomeTeamAbbr),
subtitle = paste(featureName, featureValue))
}
plotPlay(filter(df, PlayId==longDist[index]), "DistanceToLOS", dfLOS[1, "DistanceToLOS"])
plotPlay = function(dfPlay, featureName, featureValue) {
ggplot(dfPlay) +
geom_point(aes(X, Y, color=Team)) +
geom_vline(aes(xintercept=LineOfScrimmage), color="yellow") +
geom_vline(aes(xintercept=10), color="grey") +
geom_vline(aes(xintercept=110), color="grey") +
coord_cartesian(xlim = c(0,120), ylim=c(0,53.3), expand=F) +
labs(title = paste("Offense", dfPlay$PossessionTeam, "; ",
"PlayDirection", dfPlay$PlayDirection, "; ",
"FieldPosition", dfPlay$FieldPosition, "; ",
"HomeTeam", dfPlay$HomeTeamAbbr),
subtitle = paste(featureName, featureValue, "; ", "Yards", dfPlay$Yards))
}
plotPlay(filter(df, PlayId==longDist[index]), "DistanceToLOS", dfLOS[1, "DistanceToLOS"])
dfPy = loadData("trainClean_py.csv") %>%
arrange(desc(DistanceToLOS))
ggplot(dfPy) +
geom_histogram(aes(DistanceToLOS))
library(knitr)
opts_chunk$set(echo = TRUE,
collapse = FALSE,
comment = "",
strip.white = TRUE,
warning = FALSE,
message = FALSE,
out.width = "70%",
fig.align = "center")
df = loadData("trainClean_py.csv")
runLM = function(theData, theResponse) {
lm(theResponse ~ ., data=theData)
}
getProbs = function(est, sd, rangeY=NULL) {
if (is.null(rangeY)) {
rangeY = log(pmax(seq(-99,99) + 15, 0))
}
pnorm(rangeY, est, sd)
}
crps = function(probVec, y, rangeY=NULL) {
if (is.null(rangeY)) {
rangeY = log(pmax(seq(-99,99) + 15, 0))
}
Hy = (rangeY >= y)
mean((probVec-Hy)^2)
}
predictCV = function(theResponse, theData, modelFnc, k=5) {
if (any(grepl("runAuction", capture.output(modelFnc)))) {
modFnc = function(data) {
# to send original data; modified it below for use in OOS prediction
theDataO = apply(data[, -1, drop=F], 2, function(col) col^(1/startDeg))
modelFnc(theDataO, data[, 1])$model
}
theData = model.matrix(~. - 1, data=as.data.frame(theData))
startDeg = formals(modelFnc)$startDeg
theData = apply(theData, 2, function(col) col^startDeg)  # modify for OOS
cat("rai", startDeg, ";\n")
} else {
cat("other; \n")
modFnc = function(data) {
modelFnc(data[, -1, drop=F], data[, 1])
}
}
theResponse = as.matrix(theResponse)
data = data.frame(y=theResponse, theData)
data %>% crossv_kfold(k = k) %>%
mutate(
model = map(train, ~modFnc(as.data.frame(.))),
predicted = map2(model, test, ~ add_predictions(as.data.frame(.y), .x)),
sd = map_dbl(model, ~ summary(.)$sigma)
) %>%
select(predicted, sd) %>%
unnest(predicted) %>%
mutate(
probEst = map2(pred, sd, getProbs),
crps = map2_dbl(probEst, y, crps)
) %>%
summarise(crps = mean(crps))
}
# select(predicted, y, pred)
# pred = tibble(dfSub$Yards, exp(predicted$pred) - 15)
# index = 200
# mean(predicted$y)
# plot(rangeY, predicted$probEst[[index]])
# abline(v=predicted$y[index])
# ggplot(predicted) +
# geom_point(aes(pred, y-pred))
#wrapper
errorOOS = function(theResponse, theData, fncs, k=5) {
map(fncs, ~ predictCV(theResponse, theData, ., k))
}
theResponse = loadData("trainResponse_py.csv")
getProbs = function(est, sd, rangeY=NULL) {
if (is.null(rangeY)) {
rangeY = log(pmax(seq(-99,99) + 15, 0))
}
pnorm(rangeY, est, sd)
}
crps = function(probVec, y, rangeY=NULL) {
if (is.null(rangeY)) {
rangeY = log(pmax(seq(-99,99) + 15, 0))
}
Hy = (rangeY >= y)
mean((probVec-Hy)^2)
}
theResponse = log(pmax(dfSub$Yards + 15, 0))
theData = select(dfSub, -Yards)
theResponse = log(pmax(theResponse$Yards + 15, 0))
errorOOS(theResponse, theData, list("rai"=rai, "lm"=runLM))
library(rai)
errorOOS(theResponse, theData, list("rai"=rai, "lm"=runLM))
rm(df)
rm(dfPy)
theData = loadData("trainClean_py.csv")
theResponse = loadData("trainResponse_py.csv")
errorOOS(theResponse, theData, list("rai"=rai, "lm"=runLM))
modelFnc = rai
predictCV(theResponse, theData, modelFnc)
theData
colnames(theData)
theData %>%
select(covariates)
covariates = c("Quarter", "PossessionTeam", "Down", "Distance", "OffenseFormation",
"DefendersInTheBox", "Turf", "GameWeather", "DistanceToGoal", "DistanceToLos")
categorical = c("Quarter", "PossessionTeam", "Down", "OffenseFormation", "Turf", "GameWeather")
theData %>%
select(covariates)
covariates = c("Quarter", "PossessionTeam", "Down", "Distance", "OffenseFormation",
"DefendersInTheBox", "Turf", "GameWeather", "DistanceToGoal", "DistanceToLOS")
theData %>%
select(covariates)
?mutate_if
theData %>%
select(covariates) %>%
mutate_at(vars(covariates), as.factor)
theData %>%
select(covariates) %>%
mutate_at(vars(categorical), as.factor)
theData2 = theData %>%
select(covariates) %>%
mutate_at(vars(categorical), as.factor)
modelFnc = rai
predictCV(theResponse, theData2, modelFnc)
library(tidyverse)
library(magrittr)
library(modelr)  # for cv
# devtools::install_github("korydjohnson/rai")
library(rai)
predictCV(theResponse, theData2, modelFnc)
modelFnc = runLM
predictCV(theResponse, theData2, modelFnc)
modelFnc = rai
# modelFnc = runLM
predictCV(theResponse, theData2, modelFnc)
modelFnc = rai
# modelFnc = runLM
predictCV(theResponse, theData2, modelFnc)
df = loadData("trainClean.csv")
dfSub = df %>%
distinct(PlayId, .keep_all = T) %>%
# select(Yards, Distance, Down) %>%
select(Yards, Distance, Down, YardLine, NflIdRusher, OffenseFormation,
OffensePersonnel, DefendersInTheBox, DefensePersonnel) %>%
mutate(
Down = as.factor(Down),
NflIdRusher = as.factor(NflIdRusher)
)
theResponse = log(pmax(dfSub$Yards + 15, 0))
theData = select(dfSub, -Yards)
modelFnc = rai
predictCV(theResponse, theData, modelFnc)
theData = loadData("trainClean_py.csv")
theResponse = loadData("trainResponse_py.csv")
theData
theResponse
theResponse = loadData("trainResponse_py.csv") %>%
pull(Yards)
theData = loadData("trainClean_py.csv")
theResponse2 = log(pmax(theResponse$Yards + 15, 0))
covariates = c("Quarter", "PossessionTeam", "Down", "Distance", "OffenseFormation",
"DefendersInTheBox", "Turf", "GameWeather", "DistanceToGoal", "DistanceToLOS")
theResponse2 = log(pmax(theResponse$Yards + 15, 0))
theResponse2 = log(pmax(theResponse + 15, 0))
covariates = c("Quarter", "PossessionTeam", "Down", "Distance", "OffenseFormation",
"DefendersInTheBox", "Turf", "GameWeather", "DistanceToGoal", "DistanceToLOS")
categorical = c("Quarter", "PossessionTeam", "Down", "OffenseFormation", "Turf", "GameWeather")
theData2 = theData %>%
select(covariates) %>%
mutate_at(vars(categorical), as.factor)
modelFnc = rai
# modelFnc = runLM
predictCV(theResponse2, theData2, modelFnc)
dfPy = loadData("trainClean_py.csv") %>%
arrange(desc(DistanceToLOS))
ggplot(dfPy) +
geom_histogram(aes(DistanceToLOS))
longDist = dfPy %>%
pull(PlayId) %>%
head()
ggplot(dfPy) +
geom_histogram(aes(DistanceToLOS))
longDist = dfPy %>%
pull(PlayId) %>%
head()
sum(longDist>5)
library(knitr)
opts_chunk$set(echo = TRUE,
collapse = FALSE,
comment = "",
strip.white = TRUE,
warning = FALSE,
message = FALSE,
out.width = "70%",
fig.align = "center")
library(tidyverse)
library(magrittr)
loadData <- function(fileName = "train.csv", ...) {
file = paste("../input", fileName, sep="/")
data.table::fread(file, ...) %>%
as_tibble()
}
df = loadData("trainClean.csv")
df = df %>%
mutate(YardsToGoal = YardLine + (100-2*YardLine)*(PossessionTeam==FieldPosition))
df %>%
distinct(PlayId, .keep_all=T) %>%
ggplot(aes(x=YardsToGoal)) +
geom_histogram()
df %<>%
mutate(LOS_Side = ifelse((PlayDirection=="right" & PossessionTeam==FieldPosition) |
(PlayDirection=="left" & PossessionTeam!=FieldPosition),
"left", "right"),
LineOfScrimmage = ifelse(LOS_Side=="left", YardLine+10, 110-YardLine))
dfLOS = df %>%
group_by(PlayId) %>%
summarise(DistanceToLOS = mean(abs(X-LineOfScrimmage))) %>%
arrange(desc(DistanceToLOS))
ggplot(dfLOS) +
geom_histogram(aes(DistanceToLOS))
longDist = dfLOS %>%
pull(PlayId) %>%
head()
index=1
plotPlay(filter(df, PlayId==longDist[index]), "DistanceToLOS", dfLOS[1, "DistanceToLOS"])
index=2
plotPlay(filter(df, PlayId==longDist[index]), "DistanceToLOS", dfLOS[1, "DistanceToLOS"])
index=3
plotPlay(filter(df, PlayId==longDist[index]), "DistanceToLOS", dfLOS[1, "DistanceToLOS"])
index=4
plotPlay(filter(df, PlayId==longDist[index]), "DistanceToLOS", dfLOS[1, "DistanceToLOS"])
index=5
plotPlay(filter(df, PlayId==longDist[index]), "DistanceToLOS", dfLOS[1, "DistanceToLOS"])
index=6
plotPlay(filter(df, PlayId==longDist[index]), "DistanceToLOS", dfLOS[1, "DistanceToLOS"])
plotPlay = function(dfPlay, featureName, featureValue) {
ggplot(dfPlay) +
geom_point(aes(X, Y, color=Team)) +
geom_vline(aes(xintercept=LineOfScrimmage), color="yellow") +
geom_vline(aes(xintercept=10), color="grey") +
geom_vline(aes(xintercept=110), color="grey") +
coord_cartesian(xlim = c(0,120), ylim=c(0,53.3), expand=F) +
labs(title = paste("Offense", dfPlay$PossessionTeam, "; ",
"PlayDirection", dfPlay$PlayDirection, "; ",
"FieldPosition", dfPlay$FieldPosition, "; ",
"HomeTeam", dfPlay$HomeTeamAbbr),
subtitle = paste(featureName, featureValue, "; ",
"Yards", dfPlay$Yards, "; ",
"Down", dfPlay$Down))
}
plotPlay(filter(df, PlayId==longDist[index]), "DistanceToLOS", dfLOS[1, "DistanceToLOS"])
index=1
plotPlay(filter(df, PlayId==longDist[index]), "DistanceToLOS", dfLOS[1, "DistanceToLOS"])
index=2
plotPlay(filter(df, PlayId==longDist[index]), "DistanceToLOS", dfLOS[1, "DistanceToLOS"])
index=3
plotPlay(filter(df, PlayId==longDist[index]), "DistanceToLOS", dfLOS[1, "DistanceToLOS"])
index=4
plotPlay(filter(df, PlayId==longDist[index]), "DistanceToLOS", dfLOS[1, "DistanceToLOS"])
index=20000
plotPlay(filter(df, PlayId==longDist[index]), "DistanceToLOS", dfLOS[1, "DistanceToLOS"])
longDist = dfLOS %>%
pull(PlayId)
index=20000
plotPlay(filter(df, PlayId==longDist[index]), "DistanceToLOS", dfLOS[1, "DistanceToLOS"])
index=20001
plotPlay(filter(df, PlayId==longDist[index]), "DistanceToLOS", dfLOS[1, "DistanceToLOS"])
index=20002
plotPlay(filter(df, PlayId==longDist[index]), "DistanceToLOS", dfLOS[1, "DistanceToLOS"])
index=20003
plotPlay(filter(df, PlayId==longDist[index]), "DistanceToLOS", dfLOS[1, "DistanceToLOS"])
ggplot(dfLOS) +
geom_histogram(aes(DistanceToLOS))
df %<>%
mutate(LOS_Side = ifelse((PlayDirection=="right" & PossessionTeam==FieldPosition) |
(PlayDirection=="left" & PossessionTeam!=FieldPosition),
"left", "right"),
LineOfScrimmage = ifelse(LOS_Side=="left", YardLine+10, 110-YardLine))
df %>%
distinct(PlayId, .keep_all = T) %>%
ggplot(aes(LineOfScrimmage)) +
geom_histogram()
summary(df$LineOfScrimmage)
dfPy %>%
ggplot(aes(LineOfScrimmage)) +
geom_histogram()
dfPy = loadData("trainClean_py.csv") %>%
arrange(desc(DistanceToLOS))
dfPy = loadData("trainClean_py.csv") %>%
arrange(desc(DistanceToLOS))
dfPy %>%
ggplot(aes(LineOfScrimmage)) +
geom_histogram()
dfPy %>%
ggplot(aes(DistanceToGoal)) +
geom_histogram()
dfPy %>%
ggplot(aes(DistanceToLOS)) +
geom_histogram()
>>>>>>> Stashed changes
