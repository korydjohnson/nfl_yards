plotPlay(dfPlay) +
geom_segment(data=dfRun, aes(x=X, y=Y, xend=Xn, yend=Yn, color="segment"),
arrow=arrow())
plotPlay(dfPlay) +
geom_segment(data=dfRun, aes(x=X, y=Y, xend=Xn, yend=Yn, color="segment"),
lineend="butt")
plotPlay(dfPlay) +
geom_segment(data=dfRun, aes(x=X, y=Y, xend=Xn, yend=Yn, color="segment"),
lineend="square")
plotPlay(dfPlay) +
geom_segment(data=dfRun, aes(x=X, y=Y, xend=Xn, yend=Yn, color="segment"),
lineend="square", cex=2)
plotPlay(dfPlay) +
geom_segment(data=dfRun, aes(x=X, y=Y, xend=Xn, yend=Yn, color="segment"),
lineend="square", cex=1)
plotPlay(dfPlay) +
geom_segment(data=dfRun, aes(x=X, y=Y, xend=Xn, yend=Yn, color="RB"),
lineend="square", cex=1)
plotPlay(dfPlay) +
geom_segment(data=dfRun, aes(x=X, y=Y, xend=Xn, yend=Yn, color="RB"),
arrow=arrow(), cex=1)
plotPlay(dfPlay) +
geom_segment(data=dfRun, aes(x=X, y=Y, xend=Xn, yend=Yn, color="RB"), cex=1)
getRunnerDir = function(dfPlay, par = "Dir") {
dfPlay %>%
filter(NflIdRusher == NflId) %>%
mutate(
dirRad = ((!!eval(par) + 90)%%360)/180,
Xn = X + S*cos(dirRad*pi),
Yn = Y + S*sin(dirRad*pi)
) %>%
select(X, Y, Xn, Yn, Dir, dirRad)
}
dfRun = getRunnerDir(dfPlay)
getRunnerDir = function(dfPlay, par = "Dir") {
dfPlay %>%
filter(NflIdRusher == NflId) %>%
mutate(
dirRad = ((!!sym(par) + 90)%%360)/180,
Xn = X + S*cos(dirRad*pi),
Yn = Y + S*sin(dirRad*pi)
) %>%
select(X, Y, Xn, Yn, Dir, dirRad)
}
dfRun = getRunnerDir(dfPlay)
plotPlay(dfPlay) +
geom_segment(data=dfRun, aes(x=X, y=Y, xend=Xn, yend=Yn, color="RB"), cex=1)
dfRun = getRunnerDir(dfPlay, "Orientation")
plotPlay(dfPlay) +
geom_segment(data=dfRun, aes(x=X, y=Y, xend=Xn, yend=Yn, color="RB"), cex=1)
plotRunner_add = function(p, dfPlay) {
dfRunner = dfPlay %>%
filter(NflIdRusher == NflId) %>%
mutate(
dirRad = ((Dir + 90)%%360)/180,
orRad = ((Orientation + 90)%%360)/180,
Xd = X + S*cos(dirRad*pi),
Yd = Y + S*sin(dirRad*pi),
Xo = X + S*cos(orRad*pi),
Yo = Y + S*sin(orRad*pi)
)
p +
geom_segment(data=dfRun, aes(x=X, y=Y, xend=Xd, yend=Yd, color="dir"), cex=1) +
geom_segment(data=dfRun, aes(x=X, y=Y, xend=Xo, yend=Yo, color="or"), cex=1)
}
plotPlay(dfPlay) +
plotRunner_add(dfPlay)
plotRunner_add = function(p, dfPlay) {
dfRunner = dfPlay %>%
filter(NflIdRusher == NflId) %>%
mutate(
dirRad = ((Dir + 90)%%360)/180,
orRad = ((Orientation + 90)%%360)/180,
Xd = X + S*cos(dirRad*pi),
Yd = Y + S*sin(dirRad*pi),
Xo = X + S*cos(orRad*pi),
Yo = Y + S*sin(orRad*pi)
)
p +
geom_segment(data=dfRun, aes(x=X, y=Y, xend=Xd, yend=Yd, color="dir"), cex=1) +
geom_segment(data=dfRun, aes(x=X, y=Y, xend=Xo, yend=Yo, color="or"), cex=1)
}
plotPlay(dfPlay) %>%
plotRunner_add(dfPlay)
plotRunner_add = function(p, dfPlay) {
dfRunner = dfPlay %>%
filter(NflIdRusher == NflId) %>%
mutate(
dirRad = ((Dir + 90)%%360)/180,
orRad = ((Orientation + 90)%%360)/180,
Xd = X + S*cos(dirRad*pi),
Yd = Y + S*sin(dirRad*pi),
Xo = X + S*cos(orRad*pi),
Yo = Y + S*sin(orRad*pi)
)
p +
geom_segment(data=dfRunner, aes(x=X, y=Y, xend=Xd, yend=Yd, color="dir"), cex=1) +
geom_segment(data=dfRunner, aes(x=X, y=Y, xend=Xo, yend=Yo, color="or"), cex=1)
}
plotPlay(dfPlay) %>%
plotRunner_add(dfPlay)
plotRunner_add = function(p, dfPlay) {
dfRunner = dfPlay %>%
filter(NflIdRusher == NflId) %>%
mutate(
dirRad = ((Dir + 90)%%360)/180,
orRad = ((Orientation + 90)%%360)/180,
Xd = X + S*cos(dirRad*pi),
Yd = Y + S*sin(dirRad*pi),
Xo = X + S*cos(orRad*pi),
Yo = Y + S*sin(orRad*pi)
)
p +
geom_segment(data=dfRunner, aes(x=X, y=Y, xend=Xd, yend=Yd, color="RB"),
arrow=arrow(), cex=1) +
geom_segment(data=dfRunner, aes(x=X, y=Y, xend=Xo, yend=Yo, color="RB"), cex=1)
}
plotPlay(dfPlay) %>%
plotRunner_add(dfPlay)
?arrow
p = plotPlay(dfPlay)
dfRunner = dfPlay %>%
filter(NflIdRusher == NflId) %>%
mutate(
dirRad = ((Dir + 90)%%360)/180,
orRad = ((Orientation + 90)%%360)/180,
Xd = X + S*cos(dirRad*pi),
Yd = Y + S*sin(dirRad*pi),
Xo = X + S*cos(orRad*pi),
Yo = Y + S*sin(orRad*pi)
)
p +
geom_segment(data=dfRunner, aes(x=X, y=Y, xend=Xd, yend=Yd, color="RB"),
arrow=arrow(type="closed"), cex=1) +
geom_segment(data=dfRunner, aes(x=X, y=Y, xend=Xo, yend=Yo, color="RB"), cex=1)
p +
geom_segment(data=dfRunner, aes(x=X, y=Y, xend=Xd, yend=Yd, color="RB"),
arrow=arrow(), cex=1) +
geom_segment(data=dfRunner, aes(x=X, y=Y, xend=Xo, yend=Yo, color="RB"), cex=1)
dfRunner$S
plotRunner_add = function(p, dfPlay) {
dfRunner = dfPlay %>%
filter(NflIdRusher == NflId) %>%
mutate(
dirRad = ((Dir + 90)%%360)/180,
orRad = ((Orientation + 90)%%360)/180,
Xd = X + S*cos(dirRad*pi),
Yd = Y + S*sin(dirRad*pi),
Xo = X + cos(orRad*pi),
Yo = Y + sin(orRad*pi)
)
p +
geom_segment(data=dfRunner, aes(x=X, y=Y, xend=Xd, yend=Yd, color="RB"),
arrow=arrow(), cex=1) +
geom_segment(data=dfRunner, aes(x=X, y=Y, xend=Xo, yend=Yo, color="RB"), cex=1)
}
plotPlay(dfPlay) %>%
plotRunner_add(dfPlay)
plotRunner_add = function(p, dfPlay) {
dfRunner = dfPlay %>%
filter(NflIdRusher == NflId) %>%
mutate(
dirRad = ((Dir + 90)%%360)/180,
orRad = ((Orientation + 90)%%360)/180,
Xd = X + S*cos(dirRad*pi),
Yd = Y + S*sin(dirRad*pi),
Xo = X + cos(orRad*pi),
Yo = Y + sin(orRad*pi)
)
p +
geom_segment(data=dfRunner, aes(x=X, y=Y, xend=Xd, yend=Yd, color="RB"), cex=1) +
geom_segment(data=dfRunner, aes(x=X, y=Y, xend=Xo, yend=Yo, color="RB"), cex=1)
}
plotPlay(dfPlay) %>%
plotRunner_add(dfPlay)
plotRunner_add = function(p, dfPlay) {
dfRunner = dfPlay %>%
filter(NflIdRusher == NflId) %>%
mutate(
dirRad = ((Dir + 90)%%360)/180,
orRad = ((Orientation + 90)%%360)/180,
Xd = X + S*cos(dirRad*pi),
Yd = Y + S*sin(dirRad*pi),
Xo = X + S/2*cos(orRad*pi),
Yo = Y + S/2*sin(orRad*pi)
)
p +
geom_segment(data=dfRunner, aes(x=X, y=Y, xend=Xd, yend=Yd, color="RB"), cex=1) +
geom_segment(data=dfRunner, aes(x=X, y=Y, xend=Xo, yend=Yo, color="RB"), cex=1)
}
plotPlay(dfPlay) %>%
plotRunner_add(dfPlay)
dfRunner$Orientation
plotPlay(dfPlay) %>%
plotRunner_add(dfPlay)
plotPlay = function(dfPlay, featureName=NULL, featureValue=NULL, runner=T) {
dfRun = dfPlay %>%
filter(Position == "QB" | NflIdRusher == NflId)
p = ggplot(dfPlay) +
geom_point(aes(X, Y, color=Team)) +
geom_vline(aes(xintercept=LineOfScrimmage), color="yellow") +
geom_vline(aes(xintercept=10), color="grey") +
geom_vline(aes(xintercept=110), color="grey") +
coord_cartesian(xlim = c(0,120), ylim=c(0,53.3), expand=F) +
theme(legend.title=element_blank()) +
labs(title = paste("Offense", dfPlay$PossessionTeam, "; ",
"PlayDirection", dfPlay$PlayDirection, "; ",
"FieldPosition", dfPlay$FieldPosition, "; ",
"HomeTeam", dfPlay$HomeTeamAbbr),
subtitle = paste(featureName, featureValue, "; ",
"Yards", dfPlay$Yards, "; ",
"Down", dfPlay$Down)) +
geom_point(data=dfRun, aes(X, Y, color=Position))
if (runner) p + plotRunner_add(dfPlay) else p
}
plotRunner_add = function(p, dfPlay) {
dfRunner = dfPlay %>%
filter(NflIdRusher == NflId) %>%
mutate(
dirRad = ((Dir + 90)%%360)/180,
orRad = ((Orientation + 90)%%360)/180,
Xd = X + S*cos(dirRad*pi),
Yd = Y + S*sin(dirRad*pi),
Xo = X + S/2*cos(orRad*pi),
Yo = Y + S/2*sin(orRad*pi)
)
p +
geom_segment(data=dfRunner, aes(x=X, y=Y, xend=Xd, yend=Yd, color="RB"), cex=1) +
geom_segment(data=dfRunner, aes(x=X, y=Y, xend=Xo, yend=Yo, color="RB"), cex=1)
}
plotPlay(filter(df, PlayId==longDist[index]), "DistanceToLOS", dfLOS[1, "DistanceToLOS"])
plotPlay = function(dfPlay, featureName=NULL, featureValue=NULL, runner=T) {
dfRun = dfPlay %>%
filter(Position == "QB" | NflIdRusher == NflId)
p = ggplot(dfPlay) +
geom_point(aes(X, Y, color=Team)) +
geom_vline(aes(xintercept=LineOfScrimmage), color="yellow") +
geom_vline(aes(xintercept=10), color="grey") +
geom_vline(aes(xintercept=110), color="grey") +
coord_cartesian(xlim = c(0,120), ylim=c(0,53.3), expand=F) +
theme(legend.title=element_blank()) +
labs(title = paste("Offense", dfPlay$PossessionTeam, "; ",
"PlayDirection", dfPlay$PlayDirection, "; ",
"FieldPosition", dfPlay$FieldPosition, "; ",
"HomeTeam", dfPlay$HomeTeamAbbr),
subtitle = paste(featureName, featureValue, "; ",
"Yards", dfPlay$Yards, "; ",
"Down", dfPlay$Down)) +
geom_point(data=dfRun, aes(X, Y, color=Position))
if (runner) plotRunner_add(p, dfPlay) else p
}
plotPlay(filter(df, PlayId==longDist[index]), "DistanceToLOS", dfLOS[1, "DistanceToLOS"])
dfPlay = filter(df, PlayId==longDist[index])
plotPlay(dfPlay, "DistanceToLOS", dfLOS[1, "DistanceToLOS"])
plotPlay(dfPlay, "DistanceToLOS", dfLOS[1, "DistanceToLOS"])
dfPlay %>%
filter(NflId==NflIdRusher) %>%
select(Dir, Orientation, S)
plotPlay = function(dfPlay, featureName=NULL, featureValue=NULL, runner=T) {
dfRun = dfPlay %>%
filter(Position == "QB" | NflIdRusher == NflId)
p = ggplot(dfPlay) +
geom_point(aes(X, Y, color=Team)) +
geom_vline(aes(xintercept=LineOfScrimmage), color="yellow") +
geom_vline(aes(xintercept=10), color="grey") +
geom_vline(aes(xintercept=110), color="grey") +
coord_cartesian(xlim = c(0,120), ylim=c(0,53.3), expand=F) +
theme(legend.title=element_blank()) +
labs(title = paste("Offense", dfPlay$PossessionTeam, "; ",
"PlayDirection", dfPlay$PlayDirection, "; ",
"FieldPosition", dfPlay$FieldPosition, "; ",
"HomeTeam", dfPlay$HomeTeamAbbr),
subtitle = paste(featureName, round(featureValue,2), "; ",
"Yards", dfPlay$Yards, "; ",
"Down", dfPlay$Down)) +
geom_point(data=dfRun, aes(X, Y, color=Position))
if (runner) plotRunner_add(p, dfPlay) else p
}
plotPlay(dfPlay, "DistanceToLOS", dfLOS[1, "DistanceToLOS"])
plotPlay(dfPlay, "DistanceToLOS", dfLOS[1, "DistanceToLOS"])
dfPlay %>%
filter(NflId==NflIdRusher) %>%
select(Dir, Orientation, S)
dfPlay
library(knitr)
opts_chunk$set(echo = TRUE,
collapse = FALSE,
comment = "",
strip.white = TRUE,
warning = FALSE,
message = FALSE,
out.width = "70%",
fig.align = "center")
df = loadData("trainClean.csv")
dfTest = loadData("test.csv")
trA = df %>%
filter(NflId==NflIdRusher)
teA = dfTest %>%
filter(NflId==NflIdRusher)
accel = tibble(tr=trA, te=teA)
geom_density()
?geom_density
ggplot(trA) %>%
geom_density(aes(A))
ggplot(trA) +
geom_density(aes(A))
ggplot(aes(A)) +
geom_density(data=dfA, aes(color="train")) +
geom_density(data=teA, aes(color="test"))
ggplot() +
geom_density(data=dfA, aes(A, color="train")) +
geom_density(data=teA, aes(A, color="test"))
ggplot() +
geom_density(data=trA, aes(A, color="train")) +
geom_density(data=teA, aes(A, color="test"))
ggplot() +
geom_density(data=trA, aes(S, color="train")) +
geom_density(data=teA, aes(S, color="test"))
trA = df %>%
filter(NflId==NflIdRusher)
teA = dfTest %>%
filter(NflId==NflIdRusher)
compareTest = function(df1, df2, feature) {
ggplot() +
geom_density(data=df1, aes(!!sym(feature), color="train")) +
geom_density(data=df2, aes(!!sym(feature), color="test"))
}
dfTr = df %>%
filter(NflId==NflIdRusher)
dfTe = dfTest %>%
filter(NflId==NflIdRusher)
compareTest = function(df1, df2, feature) {
ggplot() +
geom_density(data=df1, aes(!!sym(feature), color="train")) +
geom_density(data=df2, aes(!!sym(feature), color="test"))
}
ggplot() +
geom_density(data=dfTr, aes(!!sym(feature), color="train")) +
geom_density(data=dfTe, aes(!!sym(feature), color="test"))
compareTest = function(dfTr, dfTe, feature) {
ggplot() +
geom_density(data=dfTr, aes(!!sym(feature), color="train")) +
geom_density(data=dfTe, aes(!!sym(feature), color="test"))
}
compareTest(dfTr, dfTe, "Dir")
compareTest(dfTr, dfTe, "Orientation")
dim(dfTe)
compareTest = function(dfTr, dfTe, feature) {
ggplot() +
geom_density(data=dfTr, aes(!!sym(feature), color="train")) +
geom_density(data=dfTe, aes(!!sym(feature), color="test")) +
theme(legend.title = "Data Set")
}
compareTest(dfTr, dfTe, "Orientation")
compareTest = function(dfTr, dfTe, feature) {
ggplot() +
geom_density(data=dfTr, aes(!!sym(feature), color="train")) +
geom_density(data=dfTe, aes(!!sym(feature), color="test")) +
theme(legend.title = element_text("Data Set"))
}
compareTest(dfTr, dfTe, "Orientation")
compareTest = function(dfTr, dfTe, feature) {
ggplot() +
geom_density(data=dfTr, aes(!!sym(feature), color="train")) +
geom_density(data=dfTe, aes(!!sym(feature), color="test")) +
theme(legend.title = element_text("Data Set"))
}
compareTest(dfTr, dfTe, "Orientation")
?element_test
?element_text
compareTest = function(dfTr, dfTe, feature) {
ggplot() +
geom_density(data=dfTr, aes(!!sym(feature), color="train")) +
geom_density(data=dfTe, aes(!!sym(feature), color="test")) +
labs(color = "Data Set")
}
compareTest(dfTr, dfTe, "Orientation")
hist(dfTe$Orientation)
hist(dfTr$Orientation)
hist(dfTe$Orientation)
compareTest(dfTr, dfTe, "Dir")
colnames(dfTr)
head(df$GameId)
dfTr = df %>%
filter(NflId==NflIdRusher) %>%
filter(!str_detect(GameId, "^2017.*"))
head(dfTr)
arrange(dfTr, desc(GameId))
arrange(dfTr, desc(GameId))
arrange(dfTr, GameId)
dfTr = df %>%
filter(NflId==NflIdRusher) %>%
filter(!str_detect(GameId, "^2017.*"))
dfTe = dfTest %>%
filter(NflId==NflIdRusher)
compareTest = function(dfTr, dfTe, feature) {
ggplot() +
geom_density(data=dfTr, aes(!!sym(feature), color="train")) +
geom_density(data=dfTe, aes(!!sym(feature), color="test")) +
labs(color = "Data Set")
}
compareTest(dfTr, dfTe, "Orientation")
compareTest(dfTr, dfTe, "A")
dfTr = df %>%
filter(NflId==NflIdRusher) %>%
filter(str_detect(GameId, "^2017.*"))
arrange(dfTr, GameId)
compareTest(dfTr, dfTe, "A")
dfTr = df %>%
filter(NflId==NflIdRusher) %>%
filter(!str_detect(GameId, "^2017.*"))
arrange(dfTr, GameId)
compareTest(dfTr, dfTe, "A")
compareTest(dfTr, dfTe, "S")
dfTr = df %>%
filter(NflId==NflIdRusher) %>%
filter(str_detect(GameId, "^2017.*"))
arrange(dfTr, GameId)
compareTest(dfTr, dfTe, "S")
compareTest = function(dfTrain, dfTest, feature, year=NULL) {
dfTr = dfTrain %>%
filter(NflId==NflIdRusher)
if (!is.null(year)) {
dfTrain %<>%
filter(str_detect(GameId, paste0("^", year, ".*")))
}
dfTe = dfTest %>%
filter(NflId==NflIdRusher)
ggplot() +
geom_density(data=dfTr, aes(!!sym(feature), color=paste("train", year))) +
geom_density(data=dfTe, aes(!!sym(feature), color="test")) +
labs(color = "Data Set")
}
compareTest(dfTr, dfTe, "S")
compareTest(df, dfTest, "S")
compareTest(df, dfTest, "S", 2017)
compareTest(df, dfTest, "S", 2018)
compareTest = function(dfTrain, dfTest, feature, year=NULL) {
dfTr = dfTrain %>%
filter(NflId==NflIdRusher)
if (!is.null(year)) {
dfTr %<>%
filter(str_detect(GameId, paste0("^", year, ".*")))
}
dfTe = dfTest %>%
filter(NflId==NflIdRusher)
ggplot() +
geom_density(data=dfTr, aes(!!sym(feature), color=paste("train", year))) +
geom_density(data=dfTe, aes(!!sym(feature), color="test")) +
labs(color = "Data Set")
}
compareTest(df, dfTest, "S", 2018)
compareTest(df, dfTest, "S", 2017)
compareTest(df, dfTest, "S")
compareTest(df, dfTest, "S", 2018)
compareTest(df, dfTest, "S", 2017)
dfPlay
dfPlay$PlayDirection
plotRunner_add = function(p, dfPlay) {
dfRunner = dfPlay %>%
filter(NflIdRusher == NflId) %>%
mutate(
dirRad = ((-1^(PlayDirection=="left")*Dir + 90)%%360)/180,
orRad = ((-1^(PlayDirection=="left")*Orientation + 90)%%360)/180,
Xd = X + S*cos(dirRad*pi),
Yd = Y + S*sin(dirRad*pi),
Xo = X + S/2*cos(orRad*pi),
Yo = Y + S/2*sin(orRad*pi)
)
p +
geom_segment(data=dfRunner, aes(x=X, y=Y, xend=Xd, yend=Yd, color="RB"), cex=1) +
geom_segment(data=dfRunner, aes(x=X, y=Y, xend=Xo, yend=Yo, color="RB"), cex=1)
}
plotPlay(dfPlay)
plotRunner_add = function(p, dfPlay) {
dfRunner = dfPlay %>%
filter(NflIdRusher == NflId) %>%
mutate(
dirRad = ((-1^(PlayDirection=="left")*Dir + 90)%%360)/180,
orRad = ((-1^(PlayDirection=="left")*Orientation + 90)%%360)/180,
Xd = X + S*cos(dirRad*pi),
Yd = Y + S*sin(dirRad*pi),
Xo = X + S/2*cos(orRad*pi),
Yo = Y + S/2*sin(orRad*pi)
)
p +
geom_segment(data=dfRunner, aes(x=X, y=Y, xend=Xd, yend=Yd, color="RB"), cex=1) +
geom_segment(data=dfRunner, aes(x=X, y=Y, xend=Xo, yend=Yo, color="RB"), cex=1)
}
plotPlay = function(dfPlay, featureName=NULL, featureValue=NULL, runner=T) {
dfRun = dfPlay %>%
filter(Position == "QB" | NflIdRusher == NflId)
p = ggplot(dfPlay) +
geom_point(aes(X, Y, color=Team)) +
geom_vline(aes(xintercept=LineOfScrimmage), color="yellow") +
geom_vline(aes(xintercept=10), color="grey") +
geom_vline(aes(xintercept=110), color="grey") +
coord_cartesian(xlim = c(0,120), ylim=c(0,53.3), expand=F) +
theme(legend.title=element_blank()) +
labs(title = paste("Offense", dfPlay$PossessionTeam, "; ",
"PlayDirection", dfPlay$PlayDirection, "; ",
"FieldPosition", dfPlay$FieldPosition, "; ",
"HomeTeam", dfPlay$HomeTeamAbbr),
subtitle = paste(featureName, featureValue, "; ",
"Yards", dfPlay$Yards, "; ",
"Down", dfPlay$Down)) +
geom_point(data=dfRun, aes(X, Y, color=Position))
if (runner) plotRunner_add(p, dfPlay) else p
}
plotPlay(dfPlay)
dfRunner$A
dfRunner$S
