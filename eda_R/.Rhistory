c(rep(0, lower-1), relProbs/max(relProbs), rep(1, 199-upper))
}
}
rescaleProbs = function(probs, lims = c(-5,25)) {
rangeY = seq(-99,99)
lower = which(rangeY==lims[1])
upper = which(rangeY==lims[2])
relProbs = probs[lower:upper]
if (max(relProbs)==0) {
probs
} else {
c(rep(0, lower-1), relProbs/max(relProbs), rep(1, 199-upper))
}
}
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta)) %>%
mutate_at(vars(starts_with("probs")), ~map(., rescaleProbs)) %>%
mutate_at(vars(starts_with("probs")), ~map2_dbl(., response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("probs")), mean)
lmOut = lm(theResponse2~.^2, data=theData)
rangeY = log(pmax(seq(-99,99) + 15, 0))
pred = lmOut$fitted.values
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta)) %>%
mutate_at(vars(starts_with("probs")), ~map(., rescaleProbs)) %>%
mutate_at(vars(starts_with("probs")), ~map2_dbl(., response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("probs")), mean)
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta)) %>%
# mutate_at(vars(starts_with("probs")), ~map(., rescaleProbs)) %>%
mutate_at(vars(starts_with("probs")), ~map2_dbl(., response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("probs")), mean)
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta)) %>%
# mutate_at(vars(starts_with("probs")), ~map(., rescaleProbs)) %>%
mutate_at(vars(starts_with("probs")), ~map2_dbl(., response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("probs")), mean)
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
# probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta)) %>%
# mutate_at(vars(starts_with("probs")), ~map(., rescaleProbs)) %>%
mutate_at(vars(starts_with("probs")), ~map2_dbl(., response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("probs")), mean)
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom2 = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta)) %>%
# mutate_at(vars(starts_with("probs")), ~map(., rescaleProbs)) %>%
mutate_at(vars(starts_with("probs")), ~map2_dbl(., response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("probs")), mean)
summary(lmOut)$sigma
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom2 = map(pred, getProbs.norm, rangeY=rangeY, sd=.16),
probsNorm_hom3 = map(pred, getProbs.norm, rangeY=rangeY, sd=.17),
probsNorm_hom4 = map(pred, getProbs.norm, rangeY=rangeY, sd=.18),
probsNorm_hom5 = map(pred, getProbs.norm, rangeY=rangeY, sd=.19),
probsNorm_hom6 = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_hom7 = map(pred, getProbs.norm, rangeY=rangeY, sd=.21),
probsNorm_hom8 = map(pred, getProbs.norm, rangeY=rangeY, sd=.22),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta)) %>%
# mutate_at(vars(starts_with("probs")), ~map(., rescaleProbs)) %>%
mutate_at(vars(starts_with("probs")), ~map2_dbl(., response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("probs")), mean)
library(knitr)
opts_chunk$set(echo = TRUE,
collapse = FALSE,
comment = "",
strip.white = TRUE,
warning = FALSE,
message = FALSE,
out.width = "70%",
fig.align = "center")
theData = loadData("features_py.csv")
dim(theData)
theData = loadData("features_py.csv") %>%
select(-toRemove) %>%
mutate_at(vars(categorical), as.factor)
dim(theData); length(theResponse)
theData = loadData("features_py.csv") %>%
select(-toRemove) %>%
mutate_at(vars(categorical), as.factor)
dim(model.matrix(~., data=theData))
# dim(model.matrix(~., data=theData))
dim(model.matrix(~.^2, data=theData))
theData = loadData("features_py.csv")
colnames(theData)
library(knitr)
opts_chunk$set(echo = TRUE,
collapse = FALSE,
comment = "",
strip.white = TRUE,
warning = FALSE,
message = FALSE,
out.width = "70%",
fig.align = "center")
library(tidyverse)
library(magrittr)
library(modelr)  # for cv
library(caret)
# devtools::install_github("korydjohnson/rai")
library(rai)
loadData <- function(fileName = "train.csv", ...) {
file = paste("../input", fileName, sep="/")
data.table::fread(file, ...) %>%
as_tibble()
}
categorical = c("Down", "OffenseFormation", "Turf", "GameWeather", "Rusher_Pos")
toRemove = c(1:12, 14:16, 21:28, 33)
theData = loadData("features_py.csv") %>%
select(-toRemove) %>%
mutate_at(vars(categorical), as.factor)
# dim(model.matrix(~., data=theData))
# dim(model.matrix(~.^2, data=theData))
theResponse = loadData("response_py.csv") %>%
pull(Yards)
dim(theData); length(theResponse)
# theData
getProbs.norm = function(est, sd, rangeY=NULL, x=NULL, vB=NULL) {
if (is.null(rangeY)) {
rangeY = log(pmax(seq(-99,99) + 15, 0))
}
if (!is.null(x) && !is.null(vB)) {
x = as.matrix(x, ncol=1)
sd = sd*(1 + sqrt(t(x)%*%vB%*%x))
}
pnorm(rangeY, est, sd)
}
getProbs.pois = function(est, rangeY=NULL) {
if (is.null(rangeY)) {
rangeY_pois_rel = (pmax(seq(-14,99) + 14, 0))^(1/4)
rangeY = c(rep(-1, 199-length(rangeY_pois_rel)), rangeY_pois_rel)
}
ppois(rangeY, est)
}
getProbsInd = function(est, rangeY) {
rangeY >= est
}
crps = function(probVec, y, rangeY) {
Hy = (rangeY >= y)
mean((probVec-Hy)^2)
}
rescaleProbs = function(probs, lims = c(-5,25)) {
rangeY = seq(-99,99)
lower = which(rangeY==lims[1])
upper = which(rangeY==lims[2])
relProbs = probs[lower:upper]
if (max(relProbs)==0) {
probs
} else {
c(rep(0, lower-1), relProbs/max(relProbs), rep(1, 199-upper))
}
}
plotProbEst = function(probs, y, rangeY) {
Hy = as.integer(rangeY >= y)
tibble(probs, Hy, yards = seq(-99,99)) %>%
gather(fnc, value, probs, Hy) %>%
ggplot() +
geom_line(aes(yards, value, color=fnc))
}
predictCV = function(theResponse, theData, modelFnc, k=5) {
if (any(grepl("runAuction", capture.output(modelFnc)))) {
modFnc = function(data) {
# to send original data; modified it below for use in OOS prediction
theDataO = apply(data[, -1, drop=F], 2, function(col) col^(1/startDeg))
modelFnc(theDataO, data[, 1])$model
}
theData = model.matrix(~. - 1, data=as.data.frame(theData))
startDeg = formals(modelFnc)$startDeg
theData = apply(theData, 2, function(col) col^startDeg)  # modify for OOS
cat("rai", startDeg, ";\n")
} else {
cat("other; \n")
modFnc = function(data) {
modelFnc(data[, -1, drop=F], data[, 1])
}
}
theResponse = as.matrix(theResponse)
data = data.frame(y=theResponse, theData)
data %>% crossv_kfold(k = k) %>%
mutate(
model = map(train, ~modFnc(as.data.frame(.))),
predicted = map2(model, test, ~ add_predictions(as.data.frame(.y), .x)),
sd = map_dbl(model, ~ summary(.)$sigma)
) %>%
select(predicted, sd) %>%
unnest(predicted) %>%
mutate(
probEst = map2(pred, sd, getProbs),
crps = map2_dbl(probEst, y, crps)
) %>%
summarise(crps = mean(crps))
}
errorOOS = function(theResponse, theData, fncs, k=5) {
map(fncs, ~ predictCV(theResponse, theData, ., k))
}
runLM = function(theData, theResponse) {
lm(theResponse ~ ., data=theData)
}
runPoisReg = function(theData, theResponse) {
glm(theResponse ~., family = "poisson", data = theData)
}
theResponse2 = log(pmax(theResponse + 16, 1))
theData2 = model.matrix(~.,data=theData)
vBeta = solve(crossprod(theData2))
qqnorm(theResponse2)
tibble(response = theResponse2) %>%
ggplot() +
geom_density(aes(response))
lmOut = lm(theResponse2~., data=theData)
rangeY = log(pmax(seq(-99,99) + 16, 1))
pred = lmOut$fitted.values
distPreds =
tibble(pred = lmOut$fitted.values, response = theResponse2,
data = split(theData2, row(theData2))) %>%
mutate(probsInd = map(pred, getProbsInd, rangeY=rangeY),
probsNorm_hom = map(pred, getProbs.norm, rangeY=rangeY, sd=summary(lmOut)$sigma),
probsNorm_hom2 = map(pred, getProbs.norm, rangeY=rangeY, sd=.2),
probsNorm_het = map2(pred, data, getProbs.norm,
rangeY=rangeY, sd=.2, vB=vBeta)) %>%
# mutate_at(vars(starts_with("probs")), ~map(., rescaleProbs)) %>%
mutate_at(vars(starts_with("probs")), ~map2_dbl(., response, crps, rangeY=rangeY))
distPreds %>%
summarise_at(vars(starts_with("probs")), mean)
plot(lmOut)
ggplot(df) +
geom_density(A)
geom_density(Acc)
library(knitr)
opts_chunk$set(echo = TRUE,
collapse = FALSE,
comment = "",
strip.white = TRUE,
warning = FALSE,
message = FALSE,
out.width = "70%",
fig.align = "center")
plotPlays("20171210021098")
options(repr.plot.width=10, repr.plot.height=6)
samp_play <- "20170910001102"
plotPlay = function(dfPlay, features=NULL, run=F) {
p = dfPlay %>%
ggplot(aes(X, Y, color = OnOffense))  +
geom_point(size = 2) +
geom_segment(aes(x = X, y = Y, xend = X_end, yend = Y_end),
arrow = arrow(length = unit(.5,"cm"))) +
geom_point(data = filter(dfPlay, NflId == NflIdRusher),
pch=21, size = 1.5, fill = "black") +
# geom_point(data = filter(dfPlay, Position == "QB"), size = 2, fill = "blue") +
scale_colour_brewer(palette = "Set2")+
scale_fill_brewer(palette = "Set2")+
# geom_vline(aes(xintercept=0), color="grey") +
# geom_vline(aes(xintercept=10), color="grey") +
geom_vline(aes(xintercept = LineOfScrimmage), colour = "black", lty = 2) +
coord_cartesian(ylim=c(0,160/3), expand=F) + #xlim = c(-10,110),
labs(
x = "Distance from offensive team's own end zone",
y = "Y",
title = paste0("PlayId ", pull(dfPlay, PlayId)),
subtitle = paste("Yards", dfPlay$Yards, "; ", "Down", dfPlay$Down)
) +
theme_bw(14) +
theme(panel.grid.minor = element_blank(), panel.grid.major.y =element_blank())
if (run && !is.null(features)) {
dfC = circleDF(c(features$LineOfScrimmage, features$Rusher_Gap_Center),
features$Rusher_Gap_Radius)
p +
geom_path(data = dfC, aes(x, y), color="gold") +
labs(subtitle = paste("Yards", dfPlay$Yards, "; ", "Down", dfPlay$Down, "; ",
"NPlayers", features$Rusher_Gap_NPlayers, "; ",
"OpenSize", round(features$Rusher_Gap_OpenSize, 2)))
} else {
p
}
}
circleDF = function(center = c(0,0), r = 1, npoints = 100){
tt <- seq(0, 2*pi, length.out = npoints)
xx <- center[1] + r * cos(tt)
yy <- center[2] + r * sin(tt)
return(data.frame(x = xx, y = yy))
}
dfPlay = filter(df, PlayId == samp_play)
library(knitr)
opts_chunk$set(echo = TRUE,
collapse = FALSE,
comment = "",
strip.white = TRUE,
warning = FALSE,
message = FALSE,
out.width = "70%",
fig.align = "center")
library(tidyverse)
library(magrittr)
library(ggforce)
loadData <- function(fileName = "train.csv", ...) {
file = paste("../input", fileName, sep="/")
data.table::fread(file, ...) %>%
as_tibble()
}
df = loadData("trainClean_py.csv")
df %<>%
mutate(
X_end = S*cos((90-Dir)*pi/180) + X,
Y_end = S*sin((90-Dir)*pi/180) + Y
)
dfFeatures = loadData("features_py.csv")
options(repr.plot.width=10, repr.plot.height=6)
samp_play <- "20170910001102"
plotPlay = function(dfPlay, features=NULL, run=F) {
p = dfPlay %>%
ggplot(aes(X, Y, color = OnOffense))  +
geom_point(size = 2) +
geom_segment(aes(x = X, y = Y, xend = X_end, yend = Y_end),
arrow = arrow(length = unit(.5,"cm"))) +
geom_point(data = filter(dfPlay, NflId == NflIdRusher),
pch=21, size = 1.5, fill = "black") +
# geom_point(data = filter(dfPlay, Position == "QB"), size = 2, fill = "blue") +
scale_colour_brewer(palette = "Set2")+
scale_fill_brewer(palette = "Set2")+
# geom_vline(aes(xintercept=0), color="grey") +
# geom_vline(aes(xintercept=10), color="grey") +
geom_vline(aes(xintercept = LineOfScrimmage), colour = "black", lty = 2) +
coord_cartesian(ylim=c(0,160/3), expand=F) + #xlim = c(-10,110),
labs(
x = "Distance from offensive team's own end zone",
y = "Y",
title = paste0("PlayId ", pull(dfPlay, PlayId)),
subtitle = paste("Yards", dfPlay$Yards, "; ", "Down", dfPlay$Down)
) +
theme_bw(14) +
theme(panel.grid.minor = element_blank(), panel.grid.major.y =element_blank())
if (run && !is.null(features)) {
dfC = circleDF(c(features$LineOfScrimmage, features$Rusher_Gap_Center),
features$Rusher_Gap_Radius)
p +
geom_path(data = dfC, aes(x, y), color="gold") +
labs(subtitle = paste("Yards", dfPlay$Yards, "; ", "Down", dfPlay$Down, "; ",
"NPlayers", features$Rusher_Gap_NPlayers, "; ",
"OpenSize", round(features$Rusher_Gap_OpenSize, 2)))
} else {
p
}
}
circleDF = function(center = c(0,0), r = 1, npoints = 100){
tt <- seq(0, 2*pi, length.out = npoints)
xx <- center[1] + r * cos(tt)
yy <- center[2] + r * sin(tt)
return(data.frame(x = xx, y = yy))
}
dfPlay = filter(df, PlayId == samp_play)
features = filter(dfFeatures, PlayId == samp_play)
plotPlay(dfPlay, features, run=T)
plotPlays("20171210021098")
plotPlays("20171210021098")
plotPlays = function(ids, n=5) {
for (index in sample.int(length(ids), min(n, length(ids)))) {
id = ids[index]
dfPlay = filter(df, PlayId == id)
features = filter(dfFeatures, PlayId == id)
p = plotPlay(dfPlay, features, run=T)
print(p)
}
}
plotPlays("20171210021098")
library(knitr)
opts_chunk$set(echo = TRUE,
collapse = FALSE,
comment = "",
strip.white = TRUE,
warning = FALSE,
message = FALSE,
out.width = "70%",
fig.align = "center")
library(tidyverse)
library(magrittr)
library(ggforce)
loadData <- function(fileName = "train.csv", ...) {
file = paste("../input", fileName, sep="/")
data.table::fread(file, ...) %>%
as_tibble()
}
df = loadData("trainClean_py.csv")
df %<>%
mutate(
X_end = S*cos((90-Dir)*pi/180) + X,
Y_end = S*sin((90-Dir)*pi/180) + Y
)
dfFeatures = loadData("features_py.csv")
options(repr.plot.width=10, repr.plot.height=6)
samp_play <- "20170910001102"
plotPlay = function(dfPlay, features=NULL, run=F) {
rusherSpeed = dfPlay %>%
filter(NflId == NflIdRusher) %>%
pull(S)
p = dfPlay %>%
ggplot(aes(X, Y, color = OnOffense))  +
geom_point(size = 2) +
geom_segment(aes(x = X, y = Y, xend = X_end, yend = Y_end),
arrow = arrow(length = unit(.5,"cm"))) +
geom_point(data = filter(dfPlay, NflId == NflIdRusher),
pch=21, size = 1.5, fill = "black") +
# geom_point(data = filter(dfPlay, Position == "QB"), size = 2, fill = "blue") +
scale_colour_brewer(palette = "Set2")+
scale_fill_brewer(palette = "Set2")+
# geom_vline(aes(xintercept=0), color="grey") +
# geom_vline(aes(xintercept=10), color="grey") +
geom_vline(aes(xintercept = LineOfScrimmage), colour = "black", lty = 2) +
coord_cartesian(ylim=c(0,160/3), expand=F) + #xlim = c(-10,110),
labs(
x = "Distance from offensive team's own end zone",
y = "Y",
title = paste0("PlayId ", pull(dfPlay, PlayId)),
subtitle = paste("Yards", dfPlay$Yards, "; ", "Down", dfPlay$Down)
) +
theme_bw(14) +
theme(panel.grid.minor = element_blank(), panel.grid.major.y =element_blank())
if (run && !is.null(features)) {
dfC = circleDF(c(features$LineOfScrimmage, features$Rusher_Gap_Center),
features$Rusher_Gap_Radius*rusherSpeed)
p +
geom_path(data = dfC, aes(x, y), color="gold") +
labs(subtitle = paste("Yards", dfPlay$Yards, "; ", "Down", dfPlay$Down, "; ",
"NPlayers", features$Rusher_Gap_NPlayers, "; ",
"OpenSize", round(features$Rusher_Gap_OpenSize, 2)))
} else {
p
}
}
circleDF = function(center = c(0,0), r = 1, npoints = 100){
tt <- seq(0, 2*pi, length.out = npoints)
xx <- center[1] + r * cos(tt)
yy <- center[2] + r * sin(tt)
return(data.frame(x = xx, y = yy))
}
dfPlay = filter(df, PlayId == samp_play)
features = filter(dfFeatures, PlayId == samp_play)
plotPlay(dfPlay, features, run=T)
ggplot(df) +
geom_density(aes(Yards))
summary(df$Yards)
df %<>%
mutate(YardsCategory = cut(Yards, breaks = c(-Inf, 0, 3, 6, Inf),
labels=c("bad", "short", "med", "long")))
table(df$YardsCategory)
PlayId_long = df %>%
filter(YardsCategory == "long") %>%
pull(PlayId)
PlayId_med = df %>%
filter(YardsCategory == "med") %>%
pull(PlayId)
PlayId_short = df %>%
filter(YardsCategory == "short") %>%
pull(PlayId)
PlayId_bad = df %>%
filter(YardsCategory == "bad") %>%
pull(PlayId)
plotPlays = function(ids, n=5) {
for (index in sample.int(length(ids), min(n, length(ids)))) {
id = ids[index]
dfPlay = filter(df, PlayId == id)
features = filter(dfFeatures, PlayId == id)
p = plotPlay(dfPlay, features, run=T)
print(p)
}
}
plotPlays(PlayId_long)
"20181007032152"
plotPlays("20171210021098")
