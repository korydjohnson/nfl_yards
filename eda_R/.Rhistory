} else {
p
}
}
dfPlay = filter(df, PlayId == samp_play)
plotPlay(dfPlay, dfFeatures, run=T)
plotPlay = function(dfPlay, dfFeatures=NULL, run=F) {
p = dfPlay %>%
ggplot(aes(X, Y, color = OnOffense))  +
geom_point(size = 2) +
geom_segment(aes(x = X, y = Y, xend = X_end, yend = Y_end),
arrow = arrow(length = unit(.5,"cm"))) +
geom_point(data = filter(dfPlay, NflId == NflIdRusher),
pch=21, size = 1.5, fill = "black") +
# geom_point(data = filter(dfPlay, Position == "QB"), size = 2, fill = "blue") +
scale_colour_brewer(palette = "Set2")+
scale_fill_brewer(palette = "Set2")+
# geom_vline(aes(xintercept=0), color="grey") +
# geom_vline(aes(xintercept=10), color="grey") +
geom_vline(aes(xintercept = LineOfScrimmage), colour = "black", lty = 2) +
coord_cartesian(ylim=c(0,160/3), expand=F) + #xlim = c(-10,110),
labs(
x = "Distance from offensive team's own end zone",
y = "Y",
title = paste0("PlayId ", pull(dfPlay, PlayId)),
subtitle = paste("Yards", dfPlay$Yards, "; ", "Down", dfPlay$Down)
) +
theme_bw(14) +
theme(panel.grid.minor = element_blank(), panel.grid.major.y =element_blank())
if (run && !is.null(dfFeatures)) {
p +
geom_circle(
data=dfFeatures, aes(LineOfScrimmage, Rusher_Center, Rusher_Radius),
)
} else {
p
}
}
plotPlay(dfPlay, dfFeatures, run=T)
columns(dfFeatures_
)
colnames(dfFeatures)
plotPlay = function(dfPlay, dfFeatures=NULL, run=F) {
p = dfPlay %>%
ggplot(aes(X, Y, color = OnOffense))  +
geom_point(size = 2) +
geom_segment(aes(x = X, y = Y, xend = X_end, yend = Y_end),
arrow = arrow(length = unit(.5,"cm"))) +
geom_point(data = filter(dfPlay, NflId == NflIdRusher),
pch=21, size = 1.5, fill = "black") +
# geom_point(data = filter(dfPlay, Position == "QB"), size = 2, fill = "blue") +
scale_colour_brewer(palette = "Set2")+
scale_fill_brewer(palette = "Set2")+
# geom_vline(aes(xintercept=0), color="grey") +
# geom_vline(aes(xintercept=10), color="grey") +
geom_vline(aes(xintercept = LineOfScrimmage), colour = "black", lty = 2) +
coord_cartesian(ylim=c(0,160/3), expand=F) + #xlim = c(-10,110),
labs(
x = "Distance from offensive team's own end zone",
y = "Y",
title = paste0("PlayId ", pull(dfPlay, PlayId)),
subtitle = paste("Yards", dfPlay$Yards, "; ", "Down", dfPlay$Down)
) +
theme_bw(14) +
theme(panel.grid.minor = element_blank(), panel.grid.major.y =element_blank())
if (run && !is.null(dfFeatures)) {
p +
geom_circle(
data=dfFeatures, aes(LineOfScrimmage, Rusher_Gap_GapCenter, Rusher_Gap_GapRadius),
)
} else {
p
}
}
dfPlay = filter(df, PlayId == samp_play)
plotPlay(dfPlay, dfFeatures, run=T)
dfPlay %>%
ggplot(aes(X, Y, color = OnOffense))  +
geom_point(size = 2) +
geom_segment(aes(x = X, y = Y, xend = X_end, yend = Y_end),
arrow = arrow(length = unit(.5,"cm"))) +
geom_point(data = filter(dfPlay, NflId == NflIdRusher),
pch=21, size = 1.5, fill = "black") +
# geom_point(data = filter(dfPlay, Position == "QB"), size = 2, fill = "blue") +
scale_colour_brewer(palette = "Set2")+
scale_fill_brewer(palette = "Set2")+
# geom_vline(aes(xintercept=0), color="grey") +
# geom_vline(aes(xintercept=10), color="grey") +
geom_vline(aes(xintercept = LineOfScrimmage), colour = "black", lty = 2) +
coord_cartesian(ylim=c(0,160/3), expand=F) + #xlim = c(-10,110),
labs(
x = "Distance from offensive team's own end zone",
y = "Y",
title = paste0("PlayId ", pull(dfPlay, PlayId)),
subtitle = paste("Yards", dfPlay$Yards, "; ", "Down", dfPlay$Down)
) +
theme_bw(14) +
theme(panel.grid.minor = element_blank(), panel.grid.major.y =element_blank())
p = dfPlay %>%
ggplot(aes(X, Y, color = OnOffense))  +
geom_point(size = 2) +
geom_segment(aes(x = X, y = Y, xend = X_end, yend = Y_end),
arrow = arrow(length = unit(.5,"cm"))) +
geom_point(data = filter(dfPlay, NflId == NflIdRusher),
pch=21, size = 1.5, fill = "black") +
# geom_point(data = filter(dfPlay, Position == "QB"), size = 2, fill = "blue") +
scale_colour_brewer(palette = "Set2")+
scale_fill_brewer(palette = "Set2")+
# geom_vline(aes(xintercept=0), color="grey") +
# geom_vline(aes(xintercept=10), color="grey") +
geom_vline(aes(xintercept = LineOfScrimmage), colour = "black", lty = 2) +
coord_cartesian(ylim=c(0,160/3), expand=F) + #xlim = c(-10,110),
labs(
x = "Distance from offensive team's own end zone",
y = "Y",
title = paste0("PlayId ", pull(dfPlay, PlayId)),
subtitle = paste("Yards", dfPlay$Yards, "; ", "Down", dfPlay$Down)
) +
theme_bw(14) +
theme(panel.grid.minor = element_blank(), panel.grid.major.y =element_blank())
p +
geom_circle(
data=dfFeatures, aes(LineOfScrimmage, Rusher_Gap_GapCenter, Rusher_Gap_GapRadius)
)
dfFeatures
dfPlay_fea = filter(dfFeatures, PlayId == samp_play)
dfPlay_fea = filter(dfFeatures, PlayId == samp_play)
features = filter(dfFeatures, PlayId == samp_play)
p +
geom_circle(
data=features, aes(LineOfScrimmage, Rusher_Gap_GapCenter, Rusher_Gap_GapRadius)
)
colnames(features)
features
p +
geom_circle(
data=features, aes(LineOfScrimmage, Rusher_Gap_GapCenter, Rusher_Gap_GapRadius)
)
ggplot(features) +
geom_circle(
data=features, aes(LineOfScrimmage, Rusher_Gap_GapCenter, Rusher_Gap_GapRadius)
) +
coord_fixed()
circles <- data.frame(
x0 = rep(1:3, 3),
y0 = rep(1:3, each = 3),
r = seq(0.1, 1, length.out = 9)
)
circles
# Behold the some circles
ggplot() +
geom_circle(aes(x0 = x0, y0 = y0, r = r, fill = r), data = circles)
# Use coord_fixed to ensure true circularity
ggplot() +
geom_circle(aes(x0 = x0, y0 = y0, r = r, fill = r), data = circles) +
coord_fixed()
# Use coord_fixed to ensure true circularity
ggplot() +
geom_circle(aes(x0 = x0, y0 = y0, r = r, fill = r), data = circles) +
coord_fixed()
# Behold the some circles
ggplot() +
geom_circle(aes(x0 = x0, y0 = y0, r = r, fill = r), data = circles)
# Use coord_fixed to ensure true circularity
ggplot() +
geom_circle(aes(x0 = x0, y0 = y0, r = r, fill = r), data = circles) +
coord_fixed()
circles <- data.frame(
x0 = rep(1:3, 3),
y0 = rep(1:3, each = 3),
r = seq(0.1, 1, length.out = 9)
)
circles
features
circles
circles = select(features, x0=LineOfScrimmage,
y0=Rusher_Gap_GapCenter, r=Rusher_Gap_GapRadius)
# Behold the some circles
ggplot() +
geom_circle(aes(x0 = x0, y0 = y0, r = r, fill = r), data = circles)
# Use coord_fixed to ensure true circularity
ggplot() +
geom_circle(aes(x0 = x0, y0 = y0, r = r, fill = r), data = circles) +
coord_fixed()
p +
geom_circle(
data=features, aes(LineOfScrimmage, Rusher_Gap_GapCenter, r = Rusher_Gap_GapRadius)
) +
coord_fixed()
p +
geom_circle(
data=features, aes(x0=LineOfScrimmage, y0=Rusher_Gap_GapCenter, r=Rusher_Gap_GapRadius)
) +
coord_fixed()
features
circles = select(features, x0=LineOfScrimmage,
y0=Rusher_Gap_GapCenter, r=Rusher_Gap_GapRadius)
circles
p +
geom_circle(
data=features, aes(x0=LineOfScrimmage, y0=Rusher_Gap_GapCenter, r =Rusher_Gap_GapRadius)
) +
coord_fixed()
p +
geom_circle(
data=features, aes(x0=LineOfScrimmage, y0=Rusher_Gap_GapCenter, r =Rusher_Gap_GapRadius)
)
p +
geom_circle(
data=features, aes(x0=LineOfScrimmage, y0=Rusher_Gap_GapCenter, r =Rusher_Gap_GapRadius)
)
circles
p
p +
geom_circle(
data=features, aes(x0=LineOfScrimmage, y0=Rusher_Gap_GapCenter, r =Rusher_Gap_GapRadius)
)
p +
geom_circle(
data=features, aes(x0=LineOfScrimmage, y0=Rusher_Gap_GapCenter, r=Rusher_Gap_GapRadius),
color="yellow"
)
dfC = circleDF(c(features$LineOfScrimmage, featuresRusher_Gap_GapCenter),
features$Rusher_Gap_GapRadius)
circleDF = function(center = c(0,0), r = 1, npoints = 100){
tt <- seq(0, 2*pi, length.out = npoints)
xx <- center[1] + r * cos(tt)
yy <- center[2] + r * sin(tt)
return(data.frame(x = xx, y = yy))
}
dfC = circleDF(c(features$LineOfScrimmage, featuresRusher_Gap_GapCenter),
features$Rusher_Gap_GapRadius)
dfC = circleDF(c(features$LineOfScrimmage, features$Rusher_Gap_GapCenter),
features$Rusher_Gap_GapRadius)
?geom_path
dfC = circleDF(c(features$LineOfScrimmage, features$Rusher_Gap_GapCenter),
features$Rusher_Gap_GapRadius)
p +
geom_path(data = dfC, aes(x, y), color="gold")
p +
geom_path(data = dfC, aes(x, y), color="gold") +
labs(subtitle = paste("Yards", dfPlay$Yards, "; ", "Down", dfPlay$Down,
"NPlayers", features$Rusher_Gap_NPlayers))
p +
geom_path(data = dfC, aes(x, y), color="gold") +
labs(subtitle = paste("Yards", dfPlay$Yards, "; ", "Down", dfPlay$Down, "; ",
"NPlayers", features$Rusher_Gap_NPlayers))
colnames(features)
plotPlay = function(dfPlay, features=NULL, run=F) {
p = dfPlay %>%
ggplot(aes(X, Y, color = OnOffense))  +
geom_point(size = 2) +
geom_segment(aes(x = X, y = Y, xend = X_end, yend = Y_end),
arrow = arrow(length = unit(.5,"cm"))) +
geom_point(data = filter(dfPlay, NflId == NflIdRusher),
pch=21, size = 1.5, fill = "black") +
# geom_point(data = filter(dfPlay, Position == "QB"), size = 2, fill = "blue") +
scale_colour_brewer(palette = "Set2")+
scale_fill_brewer(palette = "Set2")+
# geom_vline(aes(xintercept=0), color="grey") +
# geom_vline(aes(xintercept=10), color="grey") +
geom_vline(aes(xintercept = LineOfScrimmage), colour = "black", lty = 2) +
coord_cartesian(ylim=c(0,160/3), expand=F) + #xlim = c(-10,110),
labs(
x = "Distance from offensive team's own end zone",
y = "Y",
title = paste0("PlayId ", pull(dfPlay, PlayId)),
subtitle = paste("Yards", dfPlay$Yards, "; ", "Down", dfPlay$Down)
) +
theme_bw(14) +
theme(panel.grid.minor = element_blank(), panel.grid.major.y =element_blank())
if (run && !is.null(dfFeatures)) {
dfC = circleDF(c(features$LineOfScrimmage, features$Rusher_Gap_GapCenter),
features$Rusher_Gap_GapRadius)
p +
geom_path(data = dfC, aes(x, y), color="gold") +
labs(subtitle = paste("Yards", dfPlay$Yards, "; ", "Down", dfPlay$Down, "; ",
"NPlayers", features$Rusher_Gap_NPlayers,
"OpenSize", features$Rusher_Gap_OpenSize))
} else {
p
}
}
circleDF = function(center = c(0,0), r = 1, npoints = 100){
tt <- seq(0, 2*pi, length.out = npoints)
xx <- center[1] + r * cos(tt)
yy <- center[2] + r * sin(tt)
return(data.frame(x = xx, y = yy))
}
dfPlay = filter(df, PlayId == samp_play)
features = filter(dfFeatures, PlayId == samp_play)
plotPlay(dfPlay, features, run=T)
plotPlay = function(dfPlay, features=NULL, run=F) {
p = dfPlay %>%
ggplot(aes(X, Y, color = OnOffense))  +
geom_point(size = 2) +
geom_segment(aes(x = X, y = Y, xend = X_end, yend = Y_end),
arrow = arrow(length = unit(.5,"cm"))) +
geom_point(data = filter(dfPlay, NflId == NflIdRusher),
pch=21, size = 1.5, fill = "black") +
# geom_point(data = filter(dfPlay, Position == "QB"), size = 2, fill = "blue") +
scale_colour_brewer(palette = "Set2")+
scale_fill_brewer(palette = "Set2")+
# geom_vline(aes(xintercept=0), color="grey") +
# geom_vline(aes(xintercept=10), color="grey") +
geom_vline(aes(xintercept = LineOfScrimmage), colour = "black", lty = 2) +
coord_cartesian(ylim=c(0,160/3), expand=F) + #xlim = c(-10,110),
labs(
x = "Distance from offensive team's own end zone",
y = "Y",
title = paste0("PlayId ", pull(dfPlay, PlayId)),
subtitle = paste("Yards", dfPlay$Yards, "; ", "Down", dfPlay$Down)
) +
theme_bw(14) +
theme(panel.grid.minor = element_blank(), panel.grid.major.y =element_blank())
if (run && !is.null(dfFeatures)) {
dfC = circleDF(c(features$LineOfScrimmage, features$Rusher_Gap_GapCenter),
features$Rusher_Gap_GapRadius)
p +
geom_path(data = dfC, aes(x, y), color="gold") +
labs(subtitle = paste("Yards", dfPlay$Yards, "; ", "Down", dfPlay$Down, "; ",
"NPlayers", features$Rusher_Gap_NPlayers, "; ",
"OpenSize", round(features$Rusher_Gap_OpenSize, 2)))
} else {
p
}
}
circleDF = function(center = c(0,0), r = 1, npoints = 100){
tt <- seq(0, 2*pi, length.out = npoints)
xx <- center[1] + r * cos(tt)
yy <- center[2] + r * sin(tt)
return(data.frame(x = xx, y = yy))
}
plotPlay(dfPlay, features, run=T)
plotPlays = function(ids, n=5) {
for (index in sample.int(length(ids), 5)) {
id = ids[index]
dfPlay = filter(df, PlayId == id)
features = filter(dfFeatures, PlayId == id)
p = plotPlay(dfPlay, features, run=T)
print(p)
}
}
ggplot(df) +
geom_density(aes(Yards))
summary(df$Yards)
df %<>%
mutate(YardsCategory = cut(Yards, breaks = c(-Inf, 0, 3, 6, Inf),
labels=c("bad", "short", "med", "long")))
table(df$YardsCategory)
PlayId_long = df %>%
filter(YardsCategory == "long") %>%
pull(PlayId)
PlayId_med = df %>%
filter(YardsCategory == "med") %>%
pull(PlayId)
PlayId_short = df %>%
filter(YardsCategory == "short") %>%
pull(PlayId)
PlayId_bad = df %>%
filter(YardsCategory == "bad") %>%
pull(PlayId)
plotPlays = function(ids, n=5) {
for (index in sample.int(length(ids), 5)) {
id = ids[index]
dfPlay = filter(df, PlayId == id)
features = filter(dfFeatures, PlayId == id)
p = plotPlay(dfPlay, features, run=T)
print(p)
}
}
plotPlays(PlayId_long)
library(knitr)
opts_chunk$set(echo = TRUE,
collapse = FALSE,
comment = "",
strip.white = TRUE,
warning = FALSE,
message = FALSE,
out.width = "70%",
fig.align = "center")
df = loadData("trainClean_py.csv")
dfPlay = filter(df, PlayId == "20181007032152")
plotPlay = function(dfPlay, featureName=NULL, featureValue=NULL, runner=T) {
dfRun = dfPlay %>%
filter(Position == "QB" | NflIdRusher == NflId)
p = ggplot(dfPlay) +
geom_point(aes(X, Y, color=Team)) +
geom_vline(aes(xintercept=LineOfScrimmage), color="yellow") +
geom_vline(aes(xintercept=10), color="grey") +
geom_vline(aes(xintercept=110), color="grey") +
coord_cartesian(xlim = c(0,120), ylim=c(0,53.3), expand=F) +
theme(legend.title=element_blank()) +
labs(title = paste("Offense", dfPlay$PossessionTeam, "; ",
"PlayDirection", dfPlay$PlayDirection, "; ",
"FieldPosition", dfPlay$FieldPosition, "; ",
"HomeTeam", dfPlay$HomeTeamAbbr),
subtitle = paste(featureName, featureValue, "; ",
"Yards", dfPlay$Yards, "; ",
"Down", dfPlay$Down)) +
geom_point(data=dfRun, aes(X, Y, color=Position))
if (runner) plotRunner_add(p, dfPlay) else p
}
plotPlay(dfPlay, runner=F)
plotPlay = function(dfPlay, featureName=NULL, featureValue=NULL, runner=T) {
dfRun = dfPlay %>%
filter(Position == "QB" | NflIdRusher == NflId)
p = ggplot(dfPlay) +
geom_point(aes(X, Y, color=OnOffense)) +
geom_vline(aes(xintercept=LineOfScrimmage), color="yellow") +
geom_vline(aes(xintercept=10), color="grey") +
geom_vline(aes(xintercept=110), color="grey") +
coord_cartesian(xlim = c(0,120), ylim=c(0,53.3), expand=F) +
theme(legend.title=element_blank()) +
labs(title = paste("Offense", dfPlay$PossessionTeam, "; ",
"PlayDirection", dfPlay$PlayDirection, "; ",
"FieldPosition", dfPlay$FieldPosition, "; ",
"HomeTeam", dfPlay$HomeTeamAbbr),
subtitle = paste(featureName, featureValue, "; ",
"Yards", dfPlay$Yards, "; ",
"Down", dfPlay$Down)) +
geom_point(data=dfRun, aes(X, Y, color=Position))
if (runner) plotRunner_add(p, dfPlay) else p
}
plotPlay(dfPlay, runner=F)
filter(dfFeatures, PlayId=="20181007032152")
plotPlays = function(ids, n=5) {
for (index in sample.int(length(ids), min(n, length(ids)))) {
id = ids[index]
dfPlay = filter(df, PlayId == id)
features = filter(dfFeatures, PlayId == id)
p = plotPlay(dfPlay, features, run=T)
print(p)
}
}
plotPlays("20181007032152")
plotPlays = function(ids, n=5) {
for (index in sample.int(length(ids), min(n, length(ids)))) {
id = ids[index]
dfPlay = filter(df, PlayId == id)
features = filter(dfFeatures, PlayId == id)
p = plotPlay(dfPlay, features, run=T)
print(p)
}
}
plotPlay = function(dfPlay, features=NULL, run=F) {
p = dfPlay %>%
ggplot(aes(X, Y, color = OnOffense))  +
geom_point(size = 2) +
geom_segment(aes(x = X, y = Y, xend = X_end, yend = Y_end),
arrow = arrow(length = unit(.5,"cm"))) +
geom_point(data = filter(dfPlay, NflId == NflIdRusher),
pch=21, size = 1.5, fill = "black") +
# geom_point(data = filter(dfPlay, Position == "QB"), size = 2, fill = "blue") +
scale_colour_brewer(palette = "Set2")+
scale_fill_brewer(palette = "Set2")+
# geom_vline(aes(xintercept=0), color="grey") +
# geom_vline(aes(xintercept=10), color="grey") +
geom_vline(aes(xintercept = LineOfScrimmage), colour = "black", lty = 2) +
coord_cartesian(ylim=c(0,160/3), expand=F) + #xlim = c(-10,110),
labs(
x = "Distance from offensive team's own end zone",
y = "Y",
title = paste0("PlayId ", pull(dfPlay, PlayId)),
subtitle = paste("Yards", dfPlay$Yards, "; ", "Down", dfPlay$Down)
) +
theme_bw(14) +
theme(panel.grid.minor = element_blank(), panel.grid.major.y =element_blank())
if (run && !is.null(dfFeatures)) {
dfC = circleDF(c(features$LineOfScrimmage, features$Rusher_Gap_GapCenter),
features$Rusher_Gap_GapRadius)
p +
geom_path(data = dfC, aes(x, y), color="gold") +
labs(subtitle = paste("Yards", dfPlay$Yards, "; ", "Down", dfPlay$Down, "; ",
"NPlayers", features$Rusher_Gap_NPlayers, "; ",
"OpenSize", round(features$Rusher_Gap_OpenSize, 2)))
} else {
p
}
}
plotPlays("20181007032152")
loadData <- function(fileName = "train.csv", ...) {
file = paste("../input", fileName, sep="/")
data.table::fread(file, ...) %>%
as_tibble()
}
df = loadData("trainClean_py.csv")
df %<>%
mutate(
X_end = S*cos((90-Dir)*pi/180) + X,
Y_end = S*sin((90-Dir)*pi/180) + Y,
OnOffense = as.logical(OnOffense)
)
dfFeatures = loadData("features_py.csv")
plotPlays("20181007032152")
plotPlays = function(ids, n=5) {
for (index in sample.int(length(ids), min(n, length(ids)))) {
id = ids[index]
dfPlay = filter(df, PlayId == id)
features = filter(dfFeatures, PlayId == id)
p = plotPlay(dfPlay, features, run=T)
print(p)
}
}
plotPlays("20181007032152")
circleDF = function(center = c(0,0), r = 1, npoints = 100){
tt <- seq(0, 2*pi, length.out = npoints)
xx <- center[1] + r * cos(tt)
yy <- center[2] + r * sin(tt)
return(data.frame(x = xx, y = yy))
}
plotPlays("20181007032152")
