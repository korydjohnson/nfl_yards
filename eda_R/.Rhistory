theDataO = apply(data[, -1, drop=F], 2, function(col) col^(1/startDeg))
modelFnc(theDataO, data[, 1])$model
}
theData = model.matrix(~. - 1, data=as.data.frame(theData))
startDeg = formals(modelFnc)$startDeg
theData = apply(theData, 2, function(col) col^startDeg)  # modify for OOS
cat("rai", startDeg, ";\n")
# } else {
#   cat("other; \n")
#   modFnc = function(data) {
#     modelFnc(data[, -1, drop=F], data[, 1])
#   }
# }
theResponse = as.matrix(theResponse)
data = data.frame(y=theResponse, theData)
data %>% crossv_kfold(k = k) %>%
mutate(
model = map(train, ~modFnc(as.data.frame(.))),
predicted = map2(model, test, ~ add_predictions(as.data.frame(.y), .x)),
sd = map_dbl(model, ~ summary(.)$sigma)
) %>%
select(predicted, sd) %>%
unnest(predicted) %>%
mutate(
probEst = map2(pred, sd, getProbs),
crps = map2_dbl(probEst, y, crps)
) %>%
summarise(crps = mean(crps))
}
modelFnc = partial(rai, startDegree=1/3, alpha=.1)
# modelFnc = runLM
out = predictCV(theResponse2, theData2, modelFnc)
theResponse2
length(theResponse2)
dim(theData2)
# modelFnc = runLM
out = predictCV(theResponse2, theData2, modelFnc)
predictCV = function(theResponse, theData, modelFnc, k=5) {
theResponse = as.matrix(theResponse)
data = data.frame(y=theResponse, theData)
# if (any(grepl("runAuction", capture.output(modelFnc)))) {
modFnc = function(data) {
# to send original data; modified it below for use in OOS prediction
theDataO = apply(data[, -1, drop=F], 2, function(col) col^(1/startDeg))
modelFnc(theDataO, data[, 1])$model
}
theData = model.matrix(~. - 1, data=as.data.frame(theData))
startDeg = formals(modelFnc)$startDeg
theData = apply(theData, 2, function(col) col^startDeg)  # modify for OOS
cat("rai", startDeg, ";\n")
# } else {
#   cat("other; \n")
#   modFnc = function(data) {
#     modelFnc(data[, -1, drop=F], data[, 1])
#   }
# }
data %>% crossv_kfold(k = k) %>%
mutate(
model = map(train, ~modFnc(as.data.frame(.))),
predicted = map2(model, test, ~ add_predictions(as.data.frame(.y), .x)),
sd = map_dbl(model, ~ summary(.)$sigma)
) %>%
select(predicted, sd) %>%
unnest(predicted) %>%
mutate(
probEst = map2(pred, sd, getProbs),
crps = map2_dbl(probEst, y, crps)
) %>%
summarise(crps = mean(crps))
}
# modelFnc = runLM
out = predictCV(theResponse2, theData2, modelFnc)
predictCV = function(theResponse, theData, modelFnc, k=5) {
if (any(grepl("runAuction", capture.output(modelFnc)))) {
modFnc = function(data) {
# to send original data; modified it below for use in OOS prediction
theDataO = apply(data[, -1, drop=F], 2, function(col) col^(1/startDeg))
modelFnc(theDataO, data[, 1])$model
}
theData = model.matrix(~. - 1, data=as.data.frame(theData))
startDeg = formals(modelFnc)$startDeg
theData = apply(theData, 2, function(col) col^startDeg)  # modify for OOS
cat("rai", startDeg, ";\n")
} else {
cat("other; \n")
modFnc = function(data) {
modelFnc(data[, -1, drop=F], data[, 1])
}
}
theResponse = as.matrix(theResponse)
data = data.frame(y=theResponse, theData)
data %>% crossv_kfold(k = k) %>%
mutate(
model = map(train, ~modFnc(as.data.frame(.))),
predicted = map2(model, test, ~ add_predictions(as.data.frame(.y), .x)),
sd = map_dbl(model, ~ summary(.)$sigma)
) %>%
select(predicted, sd) %>%
unnest(predicted) %>%
mutate(
probEst = map2(pred, sd, getProbs),
crps = map2_dbl(probEst, y, crps)
) %>%
summarise(crps = mean(crps))
}
predictCV = function(theResponse, theData, modelFnc, k=5) {
if (any(grepl("runAuction", capture.output(modelFnc)))) {
modFnc = function(data) {
# to send original data; modified it below for use in OOS prediction
theDataO = apply(data[, -1, drop=F], 2, function(col) col^(1/startDeg))
modelFnc(theDataO, data[, 1])$model
}
theData = model.matrix(~. - 1, data=as.data.frame(theData))
startDeg = formals(modelFnc)$startDeg
theData = apply(theData, 2, function(col) col^startDeg)  # modify for OOS
cat("rai", startDeg, ";\n")
} else {
cat("other; \n")
modFnc = function(data) {
modelFnc(data[, -1, drop=F], data[, 1])
}
}
theResponse = as.matrix(theResponse)
data = data.frame(y=theResponse, theData)
data %>% crossv_kfold(k = k) %>%
mutate(
model = map(train, ~modFnc(as.data.frame(.))),
predicted = map2(model, test, ~ add_predictions(as.data.frame(.y), .x)),
sd = map_dbl(model, ~ summary(.)$sigma)
) %>%
select(predicted, sd) %>%
unnest(predicted) %>%
mutate(
probEst = map2(pred, sd, getProbs),
crps = map2_dbl(probEst, y, crps)
) %>%
summarise(crps = mean(crps))
}
library(knitr)
opts_chunk$set(echo = TRUE,
collapse = FALSE,
comment = "",
strip.white = TRUE,
warning = FALSE,
message = FALSE,
out.width = "70%",
fig.align = "center")
loadData <- function(fileName = "train.csv", ...) {
file = paste("../input", fileName, sep="/")
data.table::fread(file, ...) %>%
as_tibble()
}
library(tidyverse)
library(magrittr)
df = loadData("trainClean_py.csv")
options(repr.plot.width=10, repr.plot.height=6)
samp_play <- "20170910001102"
df %>%
filter(PlayId == samp_play) %>%
ggplot(aes(X_std, Y_std, fill = IsOnOffense), colour = "black")  +
geom_point(size = 4, pch = 21) +
geom_segment(aes(x = X_std, y = Y_std, xend = X_std_end,
yend = Y_std_end, colour = IsOnOffense),
arrow = arrow(length = unit(.5,"cm"))) +
geom_point(data = filter(train_2, IsBallCarrier,
PlayId == samp_play),
size = 1.5, pch = 21,
fill = "black") +
scale_colour_brewer(palette = "Set2")+
scale_fill_brewer(palette = "Set2")+
geom_vline(aes(xintercept = YardsFromOwnGoal),
colour = "black", lty = 2) +
scale_x_continuous(breaks = c(7:10)*10) +
labs(x = "Distance from offensive team's own end zone",
y = "Y coordinate", title = paste0("PlayId ", samp_play, ": player direction"),
subtitle = "Offense moving left to right") +
theme_bw(14) +
theme(panel.grid.minor = element_blank(),
panel.grid.major.y =element_blank())
options(repr.plot.width=10, repr.plot.height=6)
samp_play <- "20170910001102"
df %>%
filter(PlayId == samp_play) %>%
ggplot(aes(X_std, Y_std, fill = IsOnOffense), colour = "black")  +
geom_point(size = 4, pch = 21) +
geom_segment(aes(x = X_std, y = Y_std, xend = X_std_end,
yend = Y_std_end, colour = IsOnOffense),
arrow = arrow(length = unit(.5,"cm"))) +
geom_point(data = filter(df, IsBallCarrier,
PlayId == samp_play),
size = 1.5, pch = 21,
fill = "black") +
scale_colour_brewer(palette = "Set2")+
scale_fill_brewer(palette = "Set2")+
geom_vline(aes(xintercept = YardsFromOwnGoal),
colour = "black", lty = 2) +
scale_x_continuous(breaks = c(7:10)*10) +
labs(x = "Distance from offensive team's own end zone",
y = "Y coordinate", title = paste0("PlayId ", samp_play, ": player direction"),
subtitle = "Offense moving left to right") +
theme_bw(14) +
theme(panel.grid.minor = element_blank(),
panel.grid.major.y =element_blank())
df %>%
filter(PlayId == samp_play) %>%
ggplot(aes(X_std, Y_std, fill = IsOnOffense), colour = "black")  +
geom_point(size = 4, pch = 21) +
geom_segment(aes(x = X_std, y = Y_std, xend = X_std_end,
yend = Y_std_end, colour = IsOnOffense),
arrow = arrow(length = unit(.5,"cm"))) +
geom_point(data = filter(df, NflId == NflIdRusher,
PlayId == samp_play),
size = 1.5, pch = 21,
fill = "black") +
scale_colour_brewer(palette = "Set2")+
scale_fill_brewer(palette = "Set2")+
geom_vline(aes(xintercept = YardsFromOwnGoal),
colour = "black", lty = 2) +
scale_x_continuous(breaks = c(7:10)*10) +
labs(x = "Distance from offensive team's own end zone",
y = "Y coordinate", title = paste0("PlayId ", samp_play, ": player direction"),
subtitle = "Offense moving left to right") +
theme_bw(14) +
theme(panel.grid.minor = element_blank(),
panel.grid.major.y =element_blank())
df = loadData("trainClean_py.csv")
df %<>%
mutate(
X_end = S*cos((90-Dir)*pi/180) + X,
Y_end = S*sin((90-Dir)*pi/180) + Y
)
options(repr.plot.width=10, repr.plot.height=6)
samp_play <- "20170910001102"
df %>%
filter(PlayId == samp_play) %>%
ggplot(aes(X, Y, fill = IsOnOffense), colour = "black")  +
geom_point(size = 4, pch = 21) +
geom_segment(aes(x = X, y = Y, xend = X_end,
yend = Y_end, colour = IsOnOffense),
arrow = arrow(length = unit(.5,"cm"))) +
geom_point(data = filter(df, NflId == NflIdRusher,
PlayId == samp_play),
size = 1.5, pch = 21,
fill = "black") +
scale_colour_brewer(palette = "Set2")+
scale_fill_brewer(palette = "Set2")+
geom_vline(aes(xintercept = LineOfScrimmage),
colour = "black", lty = 2) +
scale_x_continuous(breaks = c(7:10)*10) +
labs(x = "Distance from offensive team's own end zone",
y = "Y coordinate", title = paste0("PlayId ", samp_play, ": player direction"),
subtitle = "Offense moving left to right") +
theme_bw(14) +
theme(panel.grid.minor = element_blank(),
panel.grid.major.y =element_blank())
options(repr.plot.width=10, repr.plot.height=6)
samp_play <- "20170910001102"
df %>%
filter(PlayId == samp_play) %>%
ggplot(aes(X, Y, fill = OnOffense), colour = "black")  +
geom_point(size = 4, pch = 21) +
geom_segment(aes(x = X, y = Y, xend = X_end,
yend = Y_end, colour = IsOnOffense),
arrow = arrow(length = unit(.5,"cm"))) +
geom_point(data = filter(df, NflId == NflIdRusher,
PlayId == samp_play),
size = 1.5, pch = 21,
fill = "black") +
scale_colour_brewer(palette = "Set2")+
scale_fill_brewer(palette = "Set2")+
geom_vline(aes(xintercept = LineOfScrimmage),
colour = "black", lty = 2) +
scale_x_continuous(breaks = c(7:10)*10) +
labs(x = "Distance from offensive team's own end zone",
y = "Y coordinate", title = paste0("PlayId ", samp_play, ": player direction"),
subtitle = "Offense moving left to right") +
theme_bw(14) +
theme(panel.grid.minor = element_blank(),
panel.grid.major.y =element_blank())
df %>%
filter(PlayId == samp_play) %>%
ggplot(aes(X, Y, fill = OnOffense), colour = "black")  +
geom_point(size = 4, pch = 21) +
geom_segment(aes(x = X, y = Y, xend = X_end,
yend = Y_end, colour = OnOffense),
arrow = arrow(length = unit(.5,"cm"))) +
geom_point(data = filter(df, NflId == NflIdRusher,
PlayId == samp_play),
size = 1.5, pch = 21,
fill = "black") +
scale_colour_brewer(palette = "Set2")+
scale_fill_brewer(palette = "Set2")+
geom_vline(aes(xintercept = LineOfScrimmage),
colour = "black", lty = 2) +
scale_x_continuous(breaks = c(7:10)*10) +
labs(x = "Distance from offensive team's own end zone",
y = "Y coordinate", title = paste0("PlayId ", samp_play, ": player direction"),
subtitle = "Offense moving left to right") +
theme_bw(14) +
theme(panel.grid.minor = element_blank(),
panel.grid.major.y =element_blank())
unique(df$OnOffense)
df = loadData("trainClean_py.csv")
df %<>%
mutate(
X_end = S*cos((90-Dir)*pi/180) + X,
Y_end = S*sin((90-Dir)*pi/180) + Y
)
options(repr.plot.width=10, repr.plot.height=6)
samp_play <- "20170910001102"
df %>%
filter(PlayId == samp_play) %>%
ggplot(aes(X, Y, fill = OnOffense), colour = "black")  +
geom_point(size = 4, pch = 21) +
geom_segment(aes(x = X, y = Y, xend = X_end,
yend = Y_end, colour = OnOffense),
arrow = arrow(length = unit(.5,"cm"))) +
geom_point(data = filter(df, NflId == NflIdRusher,
PlayId == samp_play),
size = 1.5, pch = 21,
fill = "black") +
scale_colour_brewer(palette = "Set2")+
scale_fill_brewer(palette = "Set2")+
geom_vline(aes(xintercept = LineOfScrimmage),
colour = "black", lty = 2) +
scale_x_continuous(breaks = c(7:10)*10) +
labs(x = "Distance from offensive team's own end zone",
y = "Y coordinate", title = paste0("PlayId ", samp_play, ": player direction"),
subtitle = "Offense moving left to right") +
theme_bw(14) +
theme(panel.grid.minor = element_blank(),
panel.grid.major.y =element_blank())
df = loadData("trainClean_py.csv")
df %<>%
mutate(
X_end = S*cos((90-Dir)*pi/180) + X,
Y_end = S*sin((90-Dir)*pi/180) + Y
)
options(repr.plot.width=10, repr.plot.height=6)
samp_play <- "20170910001102"
df %>%
filter(PlayId == samp_play) %>%
ggplot(aes(X, Y, fill = OnOffense), colour = "black")  +
geom_point(size = 4, pch = 21) +
geom_segment(aes(x = X, y = Y, xend = X_end,
yend = Y_end, colour = OnOffense),
arrow = arrow(length = unit(.5,"cm"))) +
geom_point(data = filter(df, NflId == NflIdRusher,
PlayId == samp_play),
size = 1.5, pch = 21,
fill = "black") +
scale_colour_brewer(palette = "Set2")+
scale_fill_brewer(palette = "Set2")+
geom_vline(aes(xintercept = LineOfScrimmage),
colour = "black", lty = 2) +
scale_x_continuous(breaks = c(7:10)*10) +
labs(x = "Distance from offensive team's own end zone",
y = "Y coordinate", title = paste0("PlayId ", samp_play, ": player direction"),
subtitle = "Offense moving left to right") +
theme_bw(14) +
theme(panel.grid.minor = element_blank(),
panel.grid.major.y =element_blank())
options(repr.plot.width=10, repr.plot.height=6)
samp_play <- "20170910001102"
df %>%
filter(PlayId == samp_play) %>%
ggplot(aes(X, Y, fill = ), colour = "black")  +
geom_point(size = 4, pch = 21) +
geom_segment(aes(x = X, y = Y, xend = X_end,
yend = Y_end, colour = as.logical(OnOffense)),
arrow = arrow(length = unit(.5,"cm"))) +
geom_point(data = filter(df, NflId == NflIdRusher,
PlayId == samp_play),
size = 1.5, pch = 21,
fill = "black") +
scale_colour_brewer(palette = "Set2")+
scale_fill_brewer(palette = "Set2")+
geom_vline(aes(xintercept = LineOfScrimmage),
colour = "black", lty = 2) +
scale_x_continuous(breaks = c(7:10)*10) +
labs(x = "Distance from offensive team's own end zone",
y = "Y coordinate", title = paste0("PlayId ", samp_play, ": player direction"),
subtitle = "Offense moving left to right") +
theme_bw(14) +
theme(panel.grid.minor = element_blank(),
panel.grid.major.y =element_blank())
library(knitr)
opts_chunk$set(echo = TRUE,
collapse = FALSE,
comment = "",
strip.white = TRUE,
warning = FALSE,
message = FALSE,
out.width = "70%",
fig.align = "center")
library(tidyverse)
library(magrittr)
loadData <- function(fileName = "train.csv", ...) {
file = paste("../input", fileName, sep="/")
data.table::fread(file, ...) %>%
as_tibble()
}
df = loadData("trainClean.csv")
df = loadData("trainClean.csv")
dfTest = loadData("test.csv")
compareTest = function(dfTrain, dfTest, feature, year=NULL) {
dfTr = dfTrain %>%
filter(NflId==NflIdRusher)
if (!is.null(year)) {
dfTr %<>%
filter(str_detect(GameId, paste0("^", year, ".*")))
}
dfTe = dfTest %>%
filter(NflId==NflIdRusher)
ggplot() +
geom_density(data=dfTr, aes(!!sym(feature), color=paste("train", year))) +
geom_density(data=dfTe, aes(!!sym(feature), color="test")) +
labs(color = "Data Set")
}
compareTest(df, dfTest, "S", 2017)
ggplot(dfSub, aes(Distance, Yards)) +
geom_jitter() +
geom_smooth(se=F) +
facet_wrap(~factor(Down))
compareTest(df, dfTest, "S", 2017)
dim(dfTe)
compareTest(df, dfTest, "S", 2017)
compareTest(df, dfTest, "A", 2017)
df = loadData("trainClean_py.csv")
df %<>%
mutate(
X_end = S*cos((90-Dir)*pi/180) + X,
Y_end = S*sin((90-Dir)*pi/180) + Y
)
options(repr.plot.width=10, repr.plot.height=6)
samp_play <- "20170910001102"
df %>%
filter(PlayId == samp_play) %>%
ggplot(aes(X, Y, fill = ), colour = "black")  +
geom_point(size = 4, pch = 21) +
geom_segment(aes(x = X, y = Y, xend = X_end,
yend = Y_end, colour = as.logical(OnOffense)),
arrow = arrow(length = unit(.5,"cm"))) +
geom_point(data = filter(df, NflId == NflIdRusher,
PlayId == samp_play),
size = 1.5, pch = 21,
fill = "black") +
scale_colour_brewer(palette = "Set2")+
scale_fill_brewer(palette = "Set2")+
geom_vline(aes(xintercept = LineOfScrimmage),
colour = "black", lty = 2) +
scale_x_continuous(breaks = c(7:10)*10) +
labs(x = "Distance from offensive team's own end zone",
y = "Y coordinate", title = paste0("PlayId ", samp_play, ": player direction"),
subtitle = "Offense moving left to right") +
theme_bw(14) +
theme(panel.grid.minor = element_blank(),
panel.grid.major.y =element_blank())
library(knitr)
opts_chunk$set(echo = TRUE,
collapse = FALSE,
comment = "",
strip.white = TRUE,
warning = FALSE,
message = FALSE,
out.width = "70%",
fig.align = "center")
dfPy = loadData("features.csv")
loadData <- function(fileName = "train.csv", ...) {
file = paste("../input", fileName, sep="/")
data.table::fread(file, ...) %>%
as_tibble()
}
df = loadData("trainClean.csv")
dfPy_re = loadData("features_py.csv")
colnames(dfPy_re)
dfPy = loadData("features_py.csv")
newFeatures = colnames(dfPy)[33:ncol(dfPy)]
for (col in newFeatures) {
p = ggplot(dfPy, aes(!!sym(col))) +
geom_density()
print(p)
}
dfPy = loadData("features1_py.csv")
newFeatures = colnames(dfPy)[33:ncol(dfPy)]
for (col in newFeatures) {
p = ggplot(dfPy, aes(!!sym(col))) +
geom_density()
print(p)
}
dfPy = loadData("features_py.csv")
newFeatures = colnames(dfPy)[33:ncol(dfPy)]
for (col in newFeatures) {
p = ggplot(dfPy, aes(!!sym(col))) +
geom_density()
print(p)
}
dfPy = loadData("features_py.csv")
newFeatures = colnames(dfPy)[33:ncol(dfPy)]
for (col in newFeatures) {
p = ggplot(dfPy, aes(!!sym(col))) +
geom_density()
print(p)
}
newFeatures
colnames(dfPy)
newFeatures = colnames(dfPy)[32:ncol(dfPy)]
for (col in newFeatures) {
p = ggplot(dfPy, aes(!!sym(col))) +
geom_density()
print(p)
}
